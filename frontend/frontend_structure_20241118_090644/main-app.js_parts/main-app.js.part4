t don't match this convention are listed separately.\n//\n// prettier-ignore\n\nvar simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'scrollEnd', 'toggle', 'touchMove', 'waiting', 'wheel'];\n\nfunction registerSimpleEvent(domEventName, reactName) {\n  topLevelEventsToReactNames.set(domEventName, reactName);\n  registerTwoPhaseEvent(reactName, [domEventName]);\n}\n\nfunction registerSimpleEvents() {\n  for (var i = 0; i < simpleEventPluginEvents.length; i++) {\n    var eventName = simpleEventPluginEvents[i];\n    var domEventName = eventName.toLowerCase();\n    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);\n    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);\n  } // Special cases where event names don't match.\n\n\n  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');\n  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');\n  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');\n  registerSimpleEvent('dblclick', 'onDoubleClick');\n  registerSimpleEvent('focusin', 'onFocus');\n  registerSimpleEvent('focusout', 'onBlur');\n  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');\n}\n\nfunction extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  var reactName = topLevelEventsToReactNames.get(domEventName);\n\n  if (reactName === undefined) {\n    return;\n  }\n\n  var SyntheticEventCtor = SyntheticEvent;\n  var reactEventType = domEventName;\n\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      // TODO: Fixed in https://bugzilla.mozilla.org/show_bug.cgi?id=968056. Can\n      // probably remove.\n      if (getEventCharCode(nativeEvent) === 0) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      // TODO: Fixed in https://phabricator.services.mozilla.com/D26793. Can\n      // probably remove.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup': // TODO: Disabled elements should not respond to mouse events\n\n    /* falls through */\n\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n\n    case 'scroll':\n    case 'scrollend':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n  }\n\n  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    var accumulateTargetOnly = !inCapturePhase && ( // TODO: ideally, we'd eventually add all events from\n    // nonDelegatedEvents list in DOMPluginEventSystem.\n    // Then we can remove this special list.\n    // This is a breaking change that can wait until React 18.\n    domEventName === 'scroll' || domEventName === 'scrollend');\n\n    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);\n\n    if (_listeners.length > 0) {\n      // Intentionally create event lazily.\n      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n\n      dispatchQueue.push({\n        event: _event,\n        listeners: _listeners\n      });\n    }\n  }\n}\n\nregisterSimpleEvents();\nregisterEvents$1();\nregisterEvents$2();\nregisterEvents();\nregisterEvents$3();\n\nfunction extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  // TODO: we should remove the concept of a \"SimpleEventPlugin\".\n  // This is the basic functionality of the event system. All\n  // the other plugins are essentially polyfills. So the plugin\n  // should probably be inlined somewhere and have its logic\n  // be core the to event system. This would potentially allow\n  // us to ship builds of React without the polyfilled plugins below.\n  extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\n  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the\n  // event's native \"bubble\" phase, which means that we're\n  // not in the capture phase. That's because we emulate\n  // the capture phase here still. This is a trade-off,\n  // because in an ideal world we would not emulate and use\n  // the phases properly, like we do with the SimpleEvent\n  // plugin. However, the plugins below either expect\n  // emulation (EnterLeave) or use state localized to that\n  // plugin (BeforeInput, Change, Select). The state in\n  // these modules complicates things, as you'll essentially\n  // get the case where the capture phase event might change\n  // state, only for the following bubble event to come in\n  // later and not trigger anything as the state now\n  // invalidates the heuristics of the event plugin. We\n  // could alter all these plugins to work in such ways, but\n  // that might cause other unknown side-effects that we\n  // can't foresee right now.\n\n  if (shouldProcessPolyfillPlugins) {\n    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n\n    {\n      extractEvents$6(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    }\n  }\n} // List of events that need to be individually attached to media elements.\n\n\nvar mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather\n// set them on the actual target element itself. This is primarily\n// because these events do not consistently bubble in the DOM.\n\nvar nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'scrollend', 'toggle'].concat(mediaEventTypes));\n\nfunction executeDispatch(event, listener, currentTarget) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = currentTarget;\n  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n  event.currentTarget = null;\n}\n\nfunction processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {\n  var previousInstance;\n\n  if (inCapturePhase) {\n    for (var i = dispatchListeners.length - 1; i >= 0; i--) {\n      var _dispatchListeners$i = dispatchListeners[i],\n          instance = _dispatchListeners$i.instance,\n          currentTarget = _dispatchListeners$i.currentTarget,\n          listener = _dispatchListeners$i.listener;\n\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  } else {\n    for (var _i = 0; _i < dispatchListeners.length; _i++) {\n      var _dispatchListeners$_i = dispatchListeners[_i],\n          _instance = _dispatchListeners$_i.instance,\n          _currentTarget = _dispatchListeners$_i.currentTarget,\n          _listener = _dispatchListeners$_i.listener;\n\n      if (_instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n\n      executeDispatch(event, _listener, _currentTarget);\n      previousInstance = _instance;\n    }\n  }\n}\n\nfunction processDispatchQueue(dispatchQueue, eventSystemFlags) {\n  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  for (var i = 0; i < dispatchQueue.length; i++) {\n    var _dispatchQueue$i = dispatchQueue[i],\n        event = _dispatchQueue$i.event,\n        listeners = _dispatchQueue$i.listeners;\n    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.\n  } // This would be a good time to rethrow if any of the event handlers threw.\n\n\n  rethrowCaughtError();\n}\n\nfunction dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\n  var nativeEventTarget = getEventTarget(nativeEvent);\n  var dispatchQueue = [];\n  extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\n  processDispatchQueue(dispatchQueue, eventSystemFlags);\n}\n\nfunction listenToNonDelegatedEvent(domEventName, targetElement) {\n  {\n    if (!nonDelegatedEvents.has(domEventName)) {\n      error('Did not expect a listenToNonDelegatedEvent() call for \"%s\". ' + 'This is a bug in React. Please file an issue.', domEventName);\n    }\n  }\n\n  var isCapturePhaseListener = false;\n  var listenerSet = getEventListenerSet(targetElement);\n  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);\n\n  if (!listenerSet.has(listenerSetKey)) {\n    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);\n    listenerSet.add(listenerSetKey);\n  }\n}\nfunction listenToNativeEvent(domEventName, isCapturePhaseListener, target) {\n  {\n    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {\n      error('Did not expect a listenToNativeEvent() call for \"%s\" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);\n    }\n  }\n\n  var eventSystemFlags = 0;\n\n  if (isCapturePhaseListener) {\n    eventSystemFlags |= IS_CAPTURE_PHASE;\n  }\n\n  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);\n} // This is only used by createEventHandle when the\nvar listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);\nfunction listenToAllSupportedEvents(rootContainerElement) {\n  if (!rootContainerElement[listeningMarker]) {\n    rootContainerElement[listeningMarker] = true;\n    allNativeEvents.forEach(function (domEventName) {\n      // We handle selectionchange separately because it\n      // doesn't bubble and needs to be on the document.\n      if (domEventName !== 'selectionchange') {\n        if (!nonDelegatedEvents.has(domEventName)) {\n          listenToNativeEvent(domEventName, false, rootContainerElement);\n        }\n\n        listenToNativeEvent(domEventName, true, rootContainerElement);\n      }\n    });\n    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n\n    if (ownerDocument !== null) {\n      // The selectionchange event also needs deduplication\n      // but it is attached to the document.\n      if (!ownerDocument[listeningMarker]) {\n        ownerDocument[listeningMarker] = true;\n        listenToNativeEvent('selectionchange', false, ownerDocument);\n      }\n    }\n  }\n}\n\nfunction addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {\n  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be\n  // active and not passive.\n\n  var isPassiveListener = undefined;\n\n  if (passiveBrowserEventsSupported) {\n    // Browsers introduced an intervention, making these events\n    // passive by default on document. React doesn't bind them\n    // to document anymore, but changing this now would undo\n    // the performance wins from the change. So we emulate\n    // the existing behavior manually on the roots now.\n    // https://github.com/facebook/react/issues/19651\n    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {\n      isPassiveListener = true;\n    }\n  }\n\n  targetContainer = targetContainer;\n\n\n  if (isCapturePhaseListener) {\n    if (isPassiveListener !== undefined) {\n      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\n    } else {\n      addEventCaptureListener(targetContainer, domEventName, listener);\n    }\n  } else {\n    if (isPassiveListener !== undefined) {\n      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\n    } else {\n      addEventBubbleListener(targetContainer, domEventName, listener);\n    }\n  }\n}\n\nfunction isMatchingRootContainer(grandContainer, targetContainer) {\n  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;\n}\n\nfunction dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\n  var ancestorInst = targetInst;\n\n  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {\n    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we\n\n    if (targetInst !== null) {\n      // The below logic attempts to work out if we need to change\n      // the target fiber to a different ancestor. We had similar logic\n      // in the legacy event system, except the big difference between\n      // systems is that the modern event system now has an event listener\n      // attached to each React Root and React Portal Root. Together,\n      // the DOM nodes representing these roots are the \"rootContainer\".\n      // To figure out which ancestor instance we should use, we traverse\n      // up the fiber tree from the target instance and attempt to find\n      // root boundaries that match that of our current \"rootContainer\".\n      // If we find that \"rootContainer\", we find the parent fiber\n      // sub-tree for that root and make that our ancestor instance.\n      var node = targetInst;\n\n      mainLoop: while (true) {\n        if (node === null) {\n          return;\n        }\n\n        var nodeTag = node.tag;\n\n        if (nodeTag === HostRoot || nodeTag === HostPortal) {\n          var container = node.stateNode.containerInfo;\n\n          if (isMatchingRootContainer(container, targetContainerNode)) {\n            break;\n          }\n\n          if (nodeTag === HostPortal) {\n            // The target is a portal, but it's not the rootContainer we're looking for.\n            // Normally portals handle their own events all the way down to the root.\n            // So we should be able to stop now. However, we don't know if this portal\n            // was part of *our* root.\n            var grandNode = node.return;\n\n            while (grandNode !== null) {\n              var grandTag = grandNode.tag;\n\n              if (grandTag === HostRoot || grandTag === HostPortal) {\n                var grandContainer = grandNode.stateNode.containerInfo;\n\n                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {\n                  // This is the rootContainer we're looking for and we found it as\n                  // a parent of the Portal. That means we can ignore it because the\n                  // Portal will bubble through to us.\n                  return;\n                }\n              }\n\n              grandNode = grandNode.return;\n            }\n          } // Now we need to find it's corresponding host fiber in the other\n          // tree. To do this we can use getClosestInstanceFromNode, but we\n          // need to validate that the fiber is a host instance, otherwise\n          // we need to traverse up through the DOM till we find the correct\n          // node that is from the other tree.\n\n\n          while (container !== null) {\n            var parentNode = getClosestInstanceFromNode(container);\n\n            if (parentNode === null) {\n              return;\n            }\n\n            var parentTag = parentNode.tag;\n\n            if (parentTag === HostComponent || parentTag === HostText || (parentTag === HostHoistable ) || parentTag === HostSingleton) {\n              node = ancestorInst = parentNode;\n              continue mainLoop;\n            }\n\n            container = container.parentNode;\n          }\n        }\n\n        node = node.return;\n      }\n    }\n  }\n\n  batchedUpdates(function () {\n    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);\n  });\n}\n\nfunction createDispatchListener(instance, listener, currentTarget) {\n  return {\n    instance: instance,\n    listener: listener,\n    currentTarget: currentTarget\n  };\n}\n\nfunction accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {\n  var captureName = reactName !== null ? reactName + 'Capture' : null;\n  var reactEventName = inCapturePhase ? captureName : reactName;\n  var listeners = [];\n  var instance = targetFiber;\n  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.\n\n  while (instance !== null) {\n    var _instance2 = instance,\n        stateNode = _instance2.stateNode,\n        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)\n\n    if ((tag === HostComponent || (tag === HostHoistable ) || tag === HostSingleton) && stateNode !== null) {\n      lastHostComponent = stateNode; // createEventHandle listeners\n\n\n      if (reactEventName !== null) {\n        var listener = getListener(instance, reactEventName);\n\n        if (listener != null) {\n          listeners.push(createDispatchListener(instance, listener, lastHostComponent));\n        }\n      }\n    } // If we are only accumulating events for the target, then we don't\n    // continue to propagate through the React fiber tree to find other\n    // listeners.\n\n\n    if (accumulateTargetOnly) {\n      break;\n    } // If we are processing the onBeforeBlur event, then we need to take\n\n    instance = instance.return;\n  }\n\n  return listeners;\n} // We should only use this function for:\n// - BeforeInputEventPlugin\n// - ChangeEventPlugin\n// - SelectEventPlugin\n// This is because we only process these plugins\n// in the bubble phase, so we need to accumulate two\n// phase event listeners (via emulation).\n\nfunction accumulateTwoPhaseListeners(targetFiber, reactName) {\n  var captureName = reactName + 'Capture';\n  var listeners = [];\n  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.\n\n  while (instance !== null) {\n    var _instance3 = instance,\n        stateNode = _instance3.stateNode,\n        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)\n\n    if ((tag === HostComponent || (tag === HostHoistable ) || tag === HostSingleton) && stateNode !== null) {\n      var currentTarget = stateNode;\n      var captureListener = getListener(instance, captureName);\n\n      if (captureListener != null) {\n        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\n      }\n\n      var bubbleListener = getListener(instance, reactName);\n\n      if (bubbleListener != null) {\n        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\n      }\n    }\n\n    instance = instance.return;\n  }\n\n  return listeners;\n}\n\nfunction getParent(inst) {\n  if (inst === null) {\n    return null;\n  }\n\n  do {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent && inst.tag !== HostSingleton);\n\n  if (inst) {\n    return inst;\n  }\n\n  return null;\n}\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\n\n\nfunction getLowestCommonAncestor(instA, instB) {\n  var nodeA = instA;\n  var nodeB = instB;\n  var depthA = 0;\n\n  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n\n  var depthB = 0;\n\n  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  } // If A is deeper, crawl up.\n\n\n  while (depthA - depthB > 0) {\n    nodeA = getParent(nodeA);\n    depthA--;\n  } // If B is deeper, crawl up.\n\n\n  while (depthB - depthA > 0) {\n    nodeB = getParent(nodeB);\n    depthB--;\n  } // Walk in lockstep until we find a match.\n\n\n  var depth = depthA;\n\n  while (depth--) {\n    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {\n      return nodeA;\n    }\n\n    nodeA = getParent(nodeA);\n    nodeB = getParent(nodeB);\n  }\n\n  return null;\n}\n\nfunction accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {\n  var registrationName = event._reactName;\n  var listeners = [];\n  var instance = target;\n\n  while (instance !== null) {\n    if (instance === common) {\n      break;\n    }\n\n    var _instance4 = instance,\n        alternate = _instance4.alternate,\n        stateNode = _instance4.stateNode,\n        tag = _instance4.tag;\n\n    if (alternate !== null && alternate === common) {\n      break;\n    }\n\n    if ((tag === HostComponent || (tag === HostHoistable ) || tag === HostSingleton) && stateNode !== null) {\n      var currentTarget = stateNode;\n\n      if (inCapturePhase) {\n        var captureListener = getListener(instance, registrationName);\n\n        if (captureListener != null) {\n          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\n        }\n      } else if (!inCapturePhase) {\n        var bubbleListener = getListener(instance, registrationName);\n\n        if (bubbleListener != null) {\n          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\n        }\n      }\n    }\n\n    instance = instance.return;\n  }\n\n  if (listeners.length !== 0) {\n    dispatchQueue.push({\n      event: event,\n      listeners: listeners\n    });\n  }\n} // We should only use this function for:\n// - EnterLeaveEventPlugin\n// This is because we only process this plugin\n// in the bubble phase, so we need to accumulate two\n// phase event listeners.\n\n\nfunction accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;\n\n  if (from !== null) {\n    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);\n  }\n\n  if (to !== null && enterEvent !== null) {\n    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);\n  }\n}\nfunction getListenerSetKey(domEventName, capture) {\n  return domEventName + \"__\" + (capture ? 'capture' : 'bubble');\n}\n\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\nvar didWarnInvalidHydration = false;\nvar didWarnFormActionType = false;\nvar didWarnFormActionName = false;\nvar didWarnFormActionTarget = false;\nvar didWarnFormActionMethod = false;\nvar canDiffStyleForHydrationWarning;\n\n{\n  // IE 11 parses & normalizes the style attribute as opposed to other\n  // browsers. It adds spaces and sorts the properties in some\n  // non-alphabetical order. Handling that would require sorting CSS\n  // properties in the client & server versions or applying\n  // `expectedStyle` to a temporary DOM node to read its `style` attribute\n  // normalized. Since it only affects IE, we're skipping style warnings\n  // in that browser completely in favor of doing all that work.\n  // See https://github.com/facebook/react/issues/11807\n  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;\n}\n\nfunction validatePropertiesInDevelopment(type, props) {\n  {\n    validateProperties$2(type, props);\n    validateProperties$1(type, props);\n    validateProperties(type, props, {\n      registrationNameDependencies: registrationNameDependencies,\n      possibleRegistrationNames: possibleRegistrationNames\n    });\n\n    if (props.contentEditable && !props.suppressContentEditableWarning && props.children != null) {\n      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');\n    }\n  }\n}\n\nfunction validateFormActionInDevelopment(tag, key, value, props) {\n  {\n    if (value == null) {\n      return;\n    }\n\n    if (tag === 'form') {\n      if (key === 'formAction') {\n        error('You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>.');\n      } else if (typeof value === 'function') {\n        if ((props.encType != null || props.method != null) && !didWarnFormActionMethod) {\n          didWarnFormActionMethod = true;\n\n          error('Cannot specify a encType or method for a form that specifies a ' + 'function as the action. React provides those automatically. ' + 'They will get overridden.');\n        }\n\n        if (props.target != null && !didWarnFormActionTarget) {\n          didWarnFormActionTarget = true;\n\n          error('Cannot specify a target for a form that specifies a function as the action. ' + 'The function will always be executed in the same window.');\n        }\n      }\n    } else if (tag === 'input' || tag === 'button') {\n      if (key === 'action') {\n        error('You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>.');\n      } else if (tag === 'input' && props.type !== 'submit' && props.type !== 'image' && !didWarnFormActionType) {\n        didWarnFormActionType = true;\n\n        error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n      } else if (tag === 'button' && props.type != null && props.type !== 'submit' && !didWarnFormActionType) {\n        didWarnFormActionType = true;\n\n        error('A button can only specify a formAction along with type=\"submit\" or no type.');\n      } else if (typeof value === 'function') {\n        // Function form actions cannot control the form properties\n        if (props.name != null && !didWarnFormActionName) {\n          didWarnFormActionName = true;\n\n          error('Cannot specify a \"name\" prop for a button that specifies a function as a formAction. ' + 'React needs it to encode which action should be invoked. It will get overridden.');\n        }\n\n        if ((props.formEncType != null || props.formMethod != null) && !didWarnFormActionMethod) {\n          didWarnFormActionMethod = true;\n\n          error('Cannot specify a formEncType or formMethod for a button that specifies a ' + 'function as a formAction. React provides those automatically. They will get overridden.');\n        }\n\n        if (props.formTarget != null && !didWarnFormActionTarget) {\n          didWarnFormActionTarget = true;\n\n          error('Cannot specify a formTarget for a button that specifies a function as a formAction. ' + 'The function will always be executed in the same window.');\n        }\n      }\n    } else {\n      if (key === 'action') {\n        error('You can only pass the action prop to <form>.');\n      } else {\n        error('You can only pass the formAction prop to <input> or <button>.');\n      }\n    }\n  }\n}\n\nfunction warnForPropDifference(propName, serverValue, clientValue) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    if (serverValue === clientValue) {\n      return;\n    }\n\n    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);\n    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);\n\n    if (normalizedServerValue === normalizedClientValue) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));\n  }\n}\n\nfunction warnForExtraAttributes(attributeNames) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n    var names = [];\n    attributeNames.forEach(function (name) {\n      names.push(name);\n    });\n\n    error('Extra attributes from the server: %s', names);\n  }\n}\n\nfunction warnForInvalidEventListener(registrationName, listener) {\n  {\n    if (listener === false) {\n      error('Expected `%s` listener to be a function, instead got `false`.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);\n    } else {\n      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);\n    }\n  }\n} // Parse the HTML and read it back to normalize the HTML string so that it\n// can be used for comparison.\n\n\nfunction normalizeHTML(parent, html) {\n  {\n    // We could have created a separate document here to avoid\n    // re-initializing custom elements if they exist. But this breaks\n    // how <noscript> is being handled. So we use the same document.\n    // See the discussion in https://github.com/facebook/react/pull/11157.\n    var testElement = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName) : parent.ownerDocument.createElement(parent.tagName);\n    testElement.innerHTML = html;\n    return testElement.innerHTML;\n  }\n} // HTML parsing normalizes CR and CRLF to LF.\n// It also can turn \\u0000 into \\uFFFD inside attributes.\n// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\n// If we have a mismatch, it might be caused by that.\n// We will still patch up in this case but not fire the warning.\n\n\nvar NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g;\nvar NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\n\nfunction normalizeMarkupForTextOrAttribute(markup) {\n  {\n    checkHtmlStringCoercion(markup);\n  }\n\n  var markupString = typeof markup === 'string' ? markup : '' + markup;\n  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\n}\n\nfunction checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {\n  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\n  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\n\n  if (normalizedServerText === normalizedClientText) {\n    return;\n  }\n\n  if (shouldWarnDev) {\n    {\n      if (!didWarnInvalidHydration) {\n        didWarnInvalidHydration = true;\n\n        error('Text content did not match. Server: \"%s\" Client: \"%s\"', normalizedServerText, normalizedClientText);\n      }\n    }\n  }\n\n  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {\n    // In concurrent roots, we throw when there's a text mismatch and revert to\n    // client rendering, up to the nearest Suspense boundary.\n    throw new Error('Text content does not match server-rendered HTML.');\n  }\n}\n\nfunction noop$1() {}\n\nfunction trapClickOnNonInteractiveElement(node) {\n  // Mobile Safari does not fire properly bubble click events on\n  // non-interactive elements, which means delegated click listeners do not\n  // fire. The workaround for this bug involves attaching an empty click\n  // listener on the target node.\n  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n  // Just set it using the onclick property so that we don't have to manage any\n  // bookkeeping for it. Not sure if we need to clear it when the listener is\n  // removed.\n  // TODO: Only do this for the relevant Safaris maybe?\n  node.onclick = noop$1;\n}\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\nvar xmlNamespace = 'http://www.w3.org/XML/1998/namespace';\n\nfunction setProp(domElement, tag, key, value, props, prevValue) {\n  switch (key) {\n    case 'children':\n      {\n        if (typeof value === 'string') {\n          {\n            validateTextNesting(value, tag);\n          } // Avoid setting initial textContent when the text is empty. In IE11 setting\n          // textContent on a <textarea> will cause the placeholder to not\n          // show within the <textarea> until it has been focused and blurred again.\n          // https://github.com/facebook/react/issues/6731#issuecomment-254874553\n\n\n          var canSetTextContent = tag !== 'body' && (tag !== 'textarea' || value !== '');\n\n          if (canSetTextContent) {\n            setTextContent(domElement, value);\n          }\n        } else if (typeof value === 'number') {\n          {\n            validateTextNesting('' + value, tag);\n          }\n\n          var _canSetTextContent = tag !== 'body';\n\n          if (_canSetTextContent) {\n            setTextContent(domElement, '' + value);\n          }\n        }\n\n        break;\n      }\n    // These are very common props and therefore are in the beginning of the switch.\n    // TODO: aria-label is a very common prop but allows booleans so is not like the others\n    // but should ideally go in this list too.\n\n    case 'className':\n      setValueForKnownAttribute(domElement, 'class', value);\n      break;\n\n    case 'tabIndex':\n      // This has to be case sensitive in SVG.\n      setValueForKnownAttribute(domElement, 'tabindex', value);\n      break;\n\n    case 'dir':\n    case 'role':\n    case 'viewBox':\n    case 'width':\n    case 'height':\n      {\n        setValueForKnownAttribute(domElement, key, value);\n        break;\n      }\n\n    case 'style':\n      {\n        setValueForStyles(domElement, value, prevValue);\n        break;\n      }\n    // These attributes accept URLs. These must not allow javascript: URLS.\n\n    case 'src':\n    case 'href':\n      {\n\n        if (value == null || typeof value === 'function' || typeof value === 'symbol' || typeof value === 'boolean') {\n          domElement.removeAttribute(key);\n          break;\n        } // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n\n\n        {\n          checkAttributeStringCoercion(value, key);\n        }\n\n        var sanitizedValue = sanitizeURL('' + value);\n        domElement.setAttribute(key, sanitizedValue);\n        break;\n      }\n\n    case 'action':\n    case 'formAction':\n      {\n        // TODO: Consider moving these special cases to the form, input and button tags.\n        {\n          validateFormActionInDevelopment(tag, key, value, props);\n        }\n\n        {\n          if (typeof value === 'function') {\n            // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n            // because we'll preventDefault, but it can happen if a form is manually submitted or\n            // if someone calls stopPropagation before React gets the event.\n            // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n            // error message but the URL will be logged.\n            domElement.setAttribute(key, // eslint-disable-next-line no-script-url\n            \"javascript:throw new Error('\" + 'A React form was unexpectedly submitted. If you called form.submit() manually, ' + \"consider using form.requestSubmit() instead. If you\\\\'re trying to use \" + 'event.stopPropagation() in a submit event handler, consider also calling ' + 'event.preventDefault().' + \"')\");\n            break;\n          } else if (typeof prevValue === 'function') {\n            // When we're switching off a Server Action that was originally hydrated.\n            // The server control these fields during SSR that are now trailing.\n            // The regular diffing doesn't apply since we compare against the previous props.\n            // Instead, we need to force them to be set to whatever they should be now.\n            // This would be a lot cleaner if we did this whole fork in the per-tag approach.\n            if (key === 'formAction') {\n              if (tag !== 'input') {\n                // Setting the name here isn't completely safe for inputs if this is switching\n                // to become a radio button. In that case we let the tag based override take\n                // control.\n                setProp(domElement, tag, 'name', props.name, props, null);\n              }\n\n              setProp(domElement, tag, 'formEncType', props.formEncType, props, null);\n              setProp(domElement, tag, 'formMethod', props.formMethod, props, null);\n              setProp(domElement, tag, 'formTarget', props.formTarget, props, null);\n            } else {\n              setProp(domElement, tag, 'encType', props.encType, props, null);\n              setProp(domElement, tag, 'method', props.method, props, null);\n              setProp(domElement, tag, 'target', props.target, props, null);\n            }\n          }\n        }\n\n        if (value == null || !enableFormActions  || typeof value === 'symbol' || typeof value === 'boolean') {\n          domElement.removeAttribute(key);\n          break;\n        } // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n\n\n        {\n          checkAttributeStringCoercion(value, key);\n        }\n\n        var _sanitizedValue = sanitizeURL('' + value);\n\n        domElement.setAttribute(key, _sanitizedValue);\n        break;\n      }\n\n    case 'onClick':\n      {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        if (value != null) {\n          if (typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n\n          trapClickOnNonInteractiveElement(domElement);\n        }\n\n        break;\n      }\n\n    case 'onScroll':\n      {\n        if (value != null) {\n          if (typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n\n        break;\n      }\n\n    case 'onScrollEnd':\n      {\n        if (value != null) {\n          if (typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n\n          listenToNonDelegatedEvent('scrollend', domElement);\n        }\n\n        break;\n      }\n\n    case 'dangerouslySetInnerHTML':\n      {\n        if (value != null) {\n          if (typeof value !== 'object' || !('__html' in value)) {\n            throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n          }\n\n          var nextHtml = value.__html;\n\n          if (nextHtml != null) {\n            if (props.children != null) {\n              throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n            }\n\n            {\n              setInnerHTML$1(domElement, nextHtml);\n            }\n          }\n        }\n\n        break;\n      }\n    // Note: `option.selected` is not updated if `select.multiple` is\n    // disabled with `removeAttribute`. We have special logic for handling this.\n\n    case 'multiple':\n      {\n        domElement.multiple = value && typeof value !== 'function' && typeof value !== 'symbol';\n        break;\n      }\n\n    case 'muted':\n      {\n        domElement.muted = value && typeof value !== 'function' && typeof value !== 'symbol';\n        break;\n      }\n\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'defaultValue': // Reserved\n\n    case 'defaultChecked':\n    case 'innerHTML':\n    case 'ref':\n      {\n        // TODO: `ref` is pretty common, should we move it up?\n        // Noop\n        break;\n      }\n\n    case 'autoFocus':\n      {\n        // We polyfill it separately on the client during commit.\n        // We could have excluded it in the property list instead of\n        // adding a special case here, but then it wouldn't be emitted\n        // on server rendering (but we *do* want to emit it in SSR).\n        break;\n      }\n\n    case 'xlinkHref':\n      {\n        if (value == null || typeof value === 'function' || typeof value === 'boolean' || typeof value === 'symbol') {\n          domElement.removeAttribute('xlink:href');\n          break;\n        } // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n\n\n        {\n          checkAttributeStringCoercion(value, key);\n        }\n\n        var _sanitizedValue2 = sanitizeURL('' + value);\n\n        domElement.setAttributeNS(xlinkNamespace, 'xlink:href', _sanitizedValue2);\n        break;\n      }\n\n    case 'contentEditable':\n    case 'spellCheck':\n    case 'draggable':\n    case 'value':\n    case 'autoReverse':\n    case 'externalResourcesRequired':\n    case 'focusable':\n    case 'preserveAlpha':\n      {\n        // Booleanish String\n        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n        // In React, we let users pass `true` and `false` even though technically\n        // these aren't boolean attributes (they are coerced to strings).\n        // The SVG attributes are case-sensitive. Since the HTML attributes are\n        // insensitive they also work even though we canonically use lower case.\n        if (value != null && typeof value !== 'function' && typeof value !== 'symbol') {\n          {\n            checkAttributeStringCoercion(value, key);\n          }\n\n          domElement.setAttribute(key, '' + value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n    // Boolean\n\n    case 'allowFullScreen':\n    case 'async':\n    case 'autoPlay':\n    case 'controls':\n    case 'default':\n    case 'defer':\n    case 'disabled':\n    case 'disablePictureInPicture':\n    case 'disableRemotePlayback':\n    case 'formNoValidate':\n    case 'hidden':\n    case 'loop':\n    case 'noModule':\n    case 'noValidate':\n    case 'open':\n    case 'playsInline':\n    case 'readOnly':\n    case 'required':\n    case 'reversed':\n    case 'scoped':\n    case 'seamless':\n    case 'itemScope':\n      {\n        if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n          domElement.setAttribute(key, '');\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n    // Overloaded Boolean\n\n    case 'capture':\n    case 'download':\n      {\n        // An attribute that can be used as a flag as well as with a value.\n        // When true, it should be present (set either to an empty string or its name).\n        // When false, it should be omitted.\n        // For any other value, should be present with that value.\n        if (value === true) {\n          domElement.setAttribute(key, '');\n        } else if (value !== false && value != null && typeof value !== 'function' && typeof value !== 'symbol') {\n          {\n            checkAttributeStringCoercion(value, key);\n          }\n\n          domElement.setAttribute(key, value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n\n    case 'cols':\n    case 'rows':\n    case 'size':\n    case 'span':\n      {\n        // These are HTML attributes that must be positive numbers.\n        if (value != null && typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value) && value >= 1) {\n          {\n            checkAttributeStringCoercion(value, key);\n          }\n\n          domElement.setAttribute(key, value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n\n    case 'rowSpan':\n    case 'start':\n      {\n        // These are HTML attributes that must be numbers.\n        if (value != null && typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value)) {\n          {\n            checkAttributeStringCoercion(value, key);\n          }\n\n          domElement.setAttribute(key, value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n\n    case 'xlinkActuate':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:actuate', value);\n      break;\n\n    case 'xlinkArcrole':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:arcrole', value);\n      break;\n\n    case 'xlinkRole':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:role', value);\n      break;\n\n    case 'xlinkShow':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:show', value);\n      break;\n\n    case 'xlinkTitle':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:title', value);\n      break;\n\n    case 'xlinkType':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:type', value);\n      break;\n\n    case 'xmlBase':\n      setValueForNamespacedAttribute(domElement, xmlNamespace, 'xml:base', value);\n      break;\n\n    case 'xmlLang':\n      setValueForNamespacedAttribute(domElement, xmlNamespace, 'xml:lang', value);\n      break;\n\n    case 'xmlSpace':\n      setValueForNamespacedAttribute(domElement, xmlNamespace, 'xml:space', value);\n      break;\n    // Properties that should not be allowed on custom elements.\n\n    case 'is':\n      {\n        {\n          if (prevValue != null) {\n            error('Cannot update the \"is\" prop after it has been initialized.');\n          }\n        } // TODO: We shouldn't actually set this attribute, because we've already\n        // passed it to createElement. We don't also need the attribute.\n        // However, our tests currently query for it so it's plausible someone\n        // else does too so it's break.\n\n\n        setValueForAttribute(domElement, 'is', value);\n        break;\n      }\n\n    case 'innerText':\n    case 'textContent':\n\n    // Fall through\n\n    default:\n      {\n        if (key.length > 2 && (key[0] === 'o' || key[0] === 'O') && (key[1] === 'n' || key[1] === 'N')) {\n          if (registrationNameDependencies.hasOwnProperty(key) && value != null && typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n        } else {\n          var attributeName = getAttributeAlias(key);\n          setValueForAttribute(domElement, attributeName, value);\n        }\n      }\n  }\n}\n\nfunction setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {\n  switch (key) {\n    case 'style':\n      {\n        setValueForStyles(domElement, value, prevValue);\n        break;\n      }\n\n    case 'dangerouslySetInnerHTML':\n      {\n        if (value != null) {\n          if (typeof value !== 'object' || !('__html' in value)) {\n            throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n          }\n\n          var nextHtml = value.__html;\n\n          if (nextHtml != null) {\n            if (props.children != null) {\n              throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n            }\n\n            {\n              setInnerHTML$1(domElement, nextHtml);\n            }\n          }\n        }\n\n        break;\n      }\n\n    case 'children':\n      {\n        if (typeof value === 'string') {\n          setTextContent(domElement, value);\n        } else if (typeof value === 'number') {\n          setTextContent(domElement, '' + value);\n        }\n\n        break;\n      }\n\n    case 'onScroll':\n      {\n        if (value != null) {\n          if (typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n\n        break;\n      }\n\n    case 'onScrollEnd':\n      {\n        if (value != null) {\n          if (typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n\n          listenToNonDelegatedEvent('scrollend', domElement);\n        }\n\n        break;\n      }\n\n    case 'onClick':\n      {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        if (value != null) {\n          if (typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n\n          trapClickOnNonInteractiveElement(domElement);\n        }\n\n        break;\n      }\n\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'innerHTML':\n    case 'ref':\n      {\n        // Noop\n        break;\n      }\n\n    case 'innerText': // Properties\n\n    case 'textContent':\n\n    // Fall through\n\n    default:\n      {\n        if (registrationNameDependencies.hasOwnProperty(key)) {\n          if (value != null && typeof value !== 'function') {\n            warnForInvalidEventListener(key, value);\n          }\n        } else {\n          {\n            if (typeof value === 'boolean') {\n              // Special case before the new flag is on\n              value = '' + value;\n            }\n\n            setValueForAttribute(domElement, key, value);\n          }\n        }\n      }\n  }\n}\n\nfunction setInitialProperties(domElement, tag, props) {\n  {\n    validatePropertiesInDevelopment(tag, props);\n  } // TODO: Make sure that we check isMounted before firing any of these events.\n\n\n  switch (tag) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n    case 'a':\n    case 'g':\n    case 'p':\n    case 'li':\n      {\n        // Fast track the most common tag types\n        break;\n      }\n\n    case 'input':\n      {\n        {\n          checkControlledValueProps('input', props);\n        } // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the invalid event.\n\n\n        listenToNonDelegatedEvent('invalid', domElement);\n        var name = null;\n        var type = null;\n        var value = null;\n        var defaultValue = null;\n        var checked = null;\n        var defaultChecked = null;\n\n        for (var propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n\n          var propValue = props[propKey];\n\n          if (propValue == null) {\n            continue;\n          }\n\n          switch (propKey) {\n            case 'name':\n              {\n                name = propValue;\n                break;\n              }\n\n            case 'type':\n              {\n                type = propValue;\n                break;\n              }\n\n            case 'checked':\n              {\n                checked = propValue;\n                break;\n              }\n\n            case 'defaultChecked':\n              {\n                defaultChecked = propValue;\n                break;\n              }\n\n            case 'value':\n              {\n                value = propValue;\n                break;\n              }\n\n            case 'defaultValue':\n              {\n                defaultValue = propValue;\n                break;\n              }\n\n            case 'children':\n            case 'dangerouslySetInnerHTML':\n              {\n                if (propValue != null) {\n                  throw new Error(tag + \" is a void element tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n                }\n\n                break;\n              }\n\n            default:\n              {\n                setProp(domElement, tag, propKey, propValue, props, null);\n              }\n          }\n        } // TODO: Make sure we check if this is still unmounted or do any clean\n        // up necessary since we never stop tracking anymore.\n\n\n        validateInputProps(domElement, props);\n        initInput(domElement, value, defaultValue, checked, defaultChecked, type, name, false);\n        track(domElement);\n        return;\n      }\n\n    case 'select':\n      {\n        {\n          checkControlledValueProps('select', props);\n        } // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the invalid event.\n\n\n        listenToNonDelegatedEvent('invalid', domElement);\n        var _value = null;\n        var _defaultValue = null;\n        var multiple = null;\n\n        for (var _propKey in props) {\n          if (!props.hasOwnProperty(_propKey)) {\n            continue;\n          }\n\n          var _propValue = props[_propKey];\n\n          if (_propValue == null) {\n            continue;\n          }\n\n          switch (_propKey) {\n            case 'value':\n              {\n                _value = _propValue; // This is handled by initSelect below.\n\n                break;\n              }\n\n            case 'defaultValue':\n              {\n                _defaultValue = _propValue; // This is handled by initSelect below.\n\n                break;\n              }\n\n            case 'multiple':\n              {\n                multiple = _propValue; // TODO: We don't actually have to fall through here because we set it\n                // in initSelect anyway. We can remove the special case in setProp.\n              }\n            // Fallthrough\n\n            default:\n              {\n                setProp(domElement, tag, _propKey, _propValue, props, null);\n              }\n          }\n        }\n\n        validateSelectProps(domElement, props);\n        initSelect(domElement, _value, _defaultValue, multiple);\n        return;\n      }\n\n    case 'textarea':\n      {\n        {\n          checkControlledValueProps('textarea', props);\n        } // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the invalid event.\n\n\n        listenToNonDelegatedEvent('invalid', domElement);\n        var _value2 = null;\n        var _defaultValue2 = null;\n        var children = null;\n\n        for (var _propKey2 in props) {\n          if (!props.hasOwnProperty(_propKey2)) {\n            continue;\n          }\n\n          var _propValue2 = props[_propKey2];\n\n          if (_propValue2 == null) {\n            continue;\n          }\n\n          switch (_propKey2) {\n            case 'value':\n              {\n                _value2 = _propValue2; // This is handled by initTextarea below.\n\n                break;\n              }\n\n            case 'defaultValue':\n              {\n                _defaultValue2 = _propValue2;\n                break;\n              }\n\n            case 'children':\n              {\n                children = _propValue2; // Handled by initTextarea above.\n\n                break;\n              }\n\n            case 'dangerouslySetInnerHTML':\n              {\n                if (_propValue2 != null) {\n                  // TODO: Do we really need a special error message for this. It's also pretty blunt.\n                  throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n                }\n\n                break;\n              }\n\n            default:\n              {\n                setProp(domElement, tag, _propKey2, _propValue2, props, null);\n              }\n          }\n        } // TODO: Make sure we check if this is still unmounted or do any clean\n        // up necessary since we never stop tracking anymore.\n\n\n        validateTextareaProps(domElement, props);\n        initTextarea(domElement, _value2, _defaultValue2, children);\n        track(domElement);\n        return;\n      }\n\n    case 'option':\n      {\n        validateOptionProps(domElement, props);\n\n        for (var _propKey3 in props) {\n          if (!props.hasOwnProperty(_propKey3)) {\n            continue;\n          }\n\n          var _propValue3 = props[_propKey3];\n\n          if (_propValue3 == null) {\n            continue;\n          }\n\n          switch (_propKey3) {\n            case 'selected':\n              {\n                // TODO: Remove support for selected on option.\n                domElement.selected = _propValue3 && typeof _propValue3 !== 'function' && typeof _propValue3 !== 'symbol';\n                break;\n              }\n\n            default:\n              {\n                setProp(domElement, tag, _propKey3, _propValue3, props, null);\n              }\n          }\n        }\n\n        return;\n      }\n\n    case 'dialog':\n      {\n        listenToNonDelegatedEvent('cancel', domElement);\n        listenToNonDelegatedEvent('close', domElement);\n        break;\n      }\n\n    case 'iframe':\n    case 'object':\n      {\n        // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the load event.\n        listenToNonDelegatedEvent('load', domElement);\n        break;\n      }\n\n    case 'video':\n    case 'audio':\n      {\n        // We listen to these events in case to ensure emulated bubble\n        // listeners still fire for all the media events.\n        for (var i = 0; i < mediaEventTypes.length; i++) {\n          listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n        }\n\n        break;\n      }\n\n    case 'image':\n      {\n        // We listen to these events in case to ensure emulated bubble\n        // listeners still fire for error and load events.\n        listenToNonDelegatedEvent('error', domElement);\n        listenToNonDelegatedEvent('load', domElement);\n        break;\n      }\n\n    case 'details':\n      {\n        // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the toggle event.\n        listenToNonDelegatedEvent('toggle', domElement);\n        break;\n      }\n\n    case 'embed':\n    case 'source':\n    case 'img':\n    case 'link':\n      {\n        // These are void elements that also need delegated events.\n        listenToNonDelegatedEvent('error', domElement);\n        listenToNonDelegatedEvent('load', domElement); // We fallthrough to the return of the void elements\n      }\n\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'hr':\n    case 'keygen':\n    case 'meta':\n    case 'param':\n    case 'track':\n    case 'wbr':\n    case 'menuitem':\n      {\n        // Void elements\n        for (var _propKey4 in props) {\n          if (!props.hasOwnProperty(_propKey4)) {\n            continue;\n          }\n\n          var _propValue4 = props[_propKey4];\n\n          if (_propValue4 == null) {\n            continue;\n          }\n\n          switch (_propKey4) {\n            case 'children':\n            case 'dangerouslySetInnerHTML':\n              {\n                // TODO: Can we make this a DEV warning to avoid this deny list?\n                throw new Error(tag + \" is a void element tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n              }\n            // defaultChecked and defaultValue are ignored by setProp\n\n            default:\n              {\n                setProp(domElement, tag, _propKey4, _propValue4, props, null);\n              }\n          }\n        }\n\n        return;\n      }\n\n    default:\n      {\n        if (isCustomElement(tag)) {\n          for (var _propKey5 in props) {\n            if (!props.hasOwnProperty(_propKey5)) {\n              continue;\n            }\n\n            var _propValue5 = props[_propKey5];\n\n            if (_propValue5 == null) {\n              continue;\n            }\n\n            setPropOnCustomElement(domElement, tag, _propKey5, _propValue5, props, null);\n          }\n\n          return;\n        }\n      }\n  }\n\n  for (var _propKey6 in props) {\n    if (!props.hasOwnProperty(_propKey6)) {\n      continue;\n    }\n\n    var _propValue6 = props[_propKey6];\n\n    if (_propValue6 == null) {\n      continue;\n    }\n\n    setProp(domElement, tag, _propKey6, _propValue6, props, null);\n  }\n}\nfunction updateProperties(domElement, tag, lastProps, nextProps) {\n  {\n    validatePropertiesInDevelopment(tag, nextProps);\n  }\n\n  switch (tag) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n    case 'a':\n    case 'g':\n    case 'p':\n    case 'li':\n      {\n        // Fast track the most common tag types\n        break;\n      }\n\n    case 'input':\n      {\n        var name = null;\n        var type = null;\n        var value = null;\n        var defaultValue = null;\n        var lastDefaultValue = null;\n        var checked = null;\n        var defaultChecked = null;\n\n        for (var propKey in lastProps) {\n          var lastProp = lastProps[propKey];\n\n          if (lastProps.hasOwnProperty(propKey) && lastProp != null) {\n            switch (propKey) {\n              case 'checked':\n                {\n                  break;\n                }\n\n              case 'value':\n                {\n                  // This is handled by updateWrapper below.\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  lastDefaultValue = lastProp;\n                }\n              // defaultChecked and defaultValue are ignored by setProp\n              // Fallthrough\n\n              default:\n                {\n                  if (!nextProps.hasOwnProperty(propKey)) setProp(domElement, tag, propKey, null, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        for (var _propKey7 in nextProps) {\n          var nextProp = nextProps[_propKey7];\n          var _lastProp = lastProps[_propKey7];\n\n          if (nextProps.hasOwnProperty(_propKey7) && (nextProp != null || _lastProp != null)) {\n            switch (_propKey7) {\n              case 'type':\n                {\n                  type = nextProp;\n                  break;\n                }\n\n              case 'name':\n                {\n                  name = nextProp;\n                  break;\n                }\n\n              case 'checked':\n                {\n                  checked = nextProp;\n                  break;\n                }\n\n              case 'defaultChecked':\n                {\n                  defaultChecked = nextProp;\n                  break;\n                }\n\n              case 'value':\n                {\n                  value = nextProp;\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  defaultValue = nextProp;\n                  break;\n                }\n\n              case 'children':\n              case 'dangerouslySetInnerHTML':\n                {\n                  if (nextProp != null) {\n                    throw new Error(tag + \" is a void element tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n                  }\n\n                  break;\n                }\n\n              default:\n                {\n                  if (nextProp !== _lastProp) setProp(domElement, tag, _propKey7, nextProp, nextProps, _lastProp);\n                }\n            }\n          }\n        }\n\n        {\n          var wasControlled = lastProps.type === 'checkbox' || lastProps.type === 'radio' ? lastProps.checked != null : lastProps.value != null;\n          var isControlled = nextProps.type === 'checkbox' || nextProps.type === 'radio' ? nextProps.checked != null : nextProps.value != null;\n\n          if (!wasControlled && isControlled && !didWarnUncontrolledToControlled) {\n            error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\n\n            didWarnUncontrolledToControlled = true;\n          }\n\n          if (wasControlled && !isControlled && !didWarnControlledToUncontrolled) {\n            error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\n\n            didWarnControlledToUncontrolled = true;\n          }\n        } // Update the wrapper around inputs *after* updating props. This has to\n        // happen after updating the rest of props. Otherwise HTML5 input validations\n        // raise warnings and prevent the new value from being assigned.\n\n\n        updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);\n        return;\n      }\n\n    case 'select':\n      {\n        var _value3 = null;\n        var _defaultValue3 = null;\n        var multiple = null;\n        var wasMultiple = null;\n\n        for (var _propKey8 in lastProps) {\n          var _lastProp2 = lastProps[_propKey8];\n\n          if (lastProps.hasOwnProperty(_propKey8) && _lastProp2 != null) {\n            switch (_propKey8) {\n              case 'value':\n                {\n                  // This is handled by updateWrapper below.\n                  break;\n                }\n              // defaultValue are ignored by setProp\n\n              case 'multiple':\n                {\n                  wasMultiple = _lastProp2; // TODO: Move special case in here from setProp.\n                }\n              // Fallthrough\n\n              default:\n                {\n                  if (!nextProps.hasOwnProperty(_propKey8)) setProp(domElement, tag, _propKey8, null, nextProps, _lastProp2);\n                }\n            }\n          }\n        }\n\n        for (var _propKey9 in nextProps) {\n          var _nextProp = nextProps[_propKey9];\n          var _lastProp3 = lastProps[_propKey9];\n\n          if (nextProps.hasOwnProperty(_propKey9) && (_nextProp != null || _lastProp3 != null)) {\n            switch (_propKey9) {\n              case 'value':\n                {\n                  _value3 = _nextProp; // This is handled by updateSelect below.\n\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  _defaultValue3 = _nextProp;\n                  break;\n                }\n\n              case 'multiple':\n                {\n                  multiple = _nextProp; // TODO: Just move the special case in here from setProp.\n                }\n              // Fallthrough\n\n              default:\n                {\n                  if (_nextProp !== _lastProp3) setProp(domElement, tag, _propKey9, _nextProp, nextProps, _lastProp3);\n                }\n            }\n          }\n        } // <select> value update needs to occur after <option> children\n        // reconciliation\n\n\n        updateSelect(domElement, _value3, _defaultValue3, multiple, wasMultiple);\n        return;\n      }\n\n    case 'textarea':\n      {\n        var _value4 = null;\n        var _defaultValue4 = null;\n\n        for (var _propKey10 in lastProps) {\n          var _lastProp4 = lastProps[_propKey10];\n\n          if (lastProps.hasOwnProperty(_propKey10) && _lastProp4 != null && !nextProps.hasOwnProperty(_propKey10)) {\n            switch (_propKey10) {\n              case 'value':\n                {\n                  // This is handled by updateTextarea below.\n                  break;\n                }\n\n              case 'children':\n                {\n                  // TODO: This doesn't actually do anything if it updates.\n                  break;\n                }\n              // defaultValue is ignored by setProp\n\n              default:\n                {\n                  setProp(domElement, tag, _propKey10, null, nextProps, _lastProp4);\n                }\n            }\n          }\n        }\n\n        for (var _propKey11 in nextProps) {\n          var _nextProp2 = nextProps[_propKey11];\n          var _lastProp5 = lastProps[_propKey11];\n\n          if (nextProps.hasOwnProperty(_propKey11) && (_nextProp2 != null || _lastProp5 != null)) {\n            switch (_propKey11) {\n              case 'value':\n                {\n                  _value4 = _nextProp2; // This is handled by updateTextarea below.\n\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  _defaultValue4 = _nextProp2;\n                  break;\n                }\n\n              case 'children':\n                {\n                  // TODO: This doesn't actually do anything if it updates.\n                  break;\n                }\n\n              case 'dangerouslySetInnerHTML':\n                {\n                  if (_nextProp2 != null) {\n                    // TODO: Do we really need a special error message for this. It's also pretty blunt.\n                    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n                  }\n\n                  break;\n                }\n\n              default:\n                {\n                  if (_nextProp2 !== _lastProp5) setProp(domElement, tag, _propKey11, _nextProp2, nextProps, _lastProp5);\n                }\n            }\n          }\n        }\n\n        updateTextarea(domElement, _value4, _defaultValue4);\n        return;\n      }\n\n    case 'option':\n      {\n        for (var _propKey12 in lastProps) {\n          var _lastProp6 = lastProps[_propKey12];\n\n          if (lastProps.hasOwnProperty(_propKey12) && _lastProp6 != null && !nextProps.hasOwnProperty(_propKey12)) {\n            switch (_propKey12) {\n              case 'selected':\n                {\n                  // TODO: Remove support for selected on option.\n                  domElement.selected = false;\n                  break;\n                }\n\n              default:\n                {\n                  setProp(domElement, tag, _propKey12, null, nextProps, _lastProp6);\n                }\n            }\n          }\n        }\n\n        for (var _propKey13 in nextProps) {\n          var _nextProp3 = nextProps[_propKey13];\n          var _lastProp7 = lastProps[_propKey13];\n\n          if (nextProps.hasOwnProperty(_propKey13) && _nextProp3 !== _lastProp7 && (_nextProp3 != null || _lastProp7 != null)) {\n            switch (_propKey13) {\n              case 'selected':\n                {\n                  // TODO: Remove support for selected on option.\n                  domElement.selected = _nextProp3 && typeof _nextProp3 !== 'function' && typeof _nextProp3 !== 'symbol';\n                  break;\n                }\n\n              default:\n                {\n                  setProp(domElement, tag, _propKey13, _nextProp3, nextProps, _lastProp7);\n                }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case 'img':\n    case 'link':\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'keygen':\n    case 'meta':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n    case 'menuitem':\n      {\n        // Void elements\n        for (var _propKey14 in lastProps) {\n          var _lastProp8 = lastProps[_propKey14];\n\n          if (lastProps.hasOwnProperty(_propKey14) && _lastProp8 != null && !nextProps.hasOwnProperty(_propKey14)) {\n            setProp(domElement, tag, _propKey14, null, nextProps, _lastProp8);\n          }\n        }\n\n        for (var _propKey15 in nextProps) {\n          var _nextProp4 = nextProps[_propKey15];\n          var _lastProp9 = lastProps[_propKey15];\n\n          if (nextProps.hasOwnProperty(_propKey15) && _nextProp4 !== _lastProp9 && (_nextProp4 != null || _lastProp9 != null)) {\n            switch (_propKey15) {\n              case 'children':\n              case 'dangerouslySetInnerHTML':\n                {\n                  if (_nextProp4 != null) {\n                    // TODO: Can we make this a DEV warning to avoid this deny list?\n                    throw new Error(tag + \" is a void element tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n                  }\n\n                  break;\n                }\n              // defaultChecked and defaultValue are ignored by setProp\n\n              default:\n                {\n                  setProp(domElement, tag, _propKey15, _nextProp4, nextProps, _lastProp9);\n                }\n            }\n          }\n        }\n\n        return;\n      }\n\n    default:\n      {\n        if (isCustomElement(tag)) {\n          for (var _propKey16 in lastProps) {\n            var _lastProp10 = lastProps[_propKey16];\n\n            if (lastProps.hasOwnProperty(_propKey16) && _lastProp10 != null && !nextProps.hasOwnProperty(_propKey16)) {\n              setPropOnCustomElement(domElement, tag, _propKey16, null, nextProps, _lastProp10);\n            }\n          }\n\n          for (var _propKey17 in nextProps) {\n            var _nextProp5 = nextProps[_propKey17];\n            var _lastProp11 = lastProps[_propKey17];\n\n            if (nextProps.hasOwnProperty(_propKey17) && _nextProp5 !== _lastProp11 && (_nextProp5 != null || _lastProp11 != null)) {\n              setPropOnCustomElement(domElement, tag, _propKey17, _nextProp5, nextProps, _lastProp11);\n            }\n          }\n\n          return;\n        }\n      }\n  }\n\n  for (var _propKey18 in lastProps) {\n    var _lastProp12 = lastProps[_propKey18];\n\n    if (lastProps.hasOwnProperty(_propKey18) && _lastProp12 != null && !nextProps.hasOwnProperty(_propKey18)) {\n      setProp(domElement, tag, _propKey18, null, nextProps, _lastProp12);\n    }\n  }\n\n  for (var _propKey19 in nextProps) {\n    var _nextProp6 = nextProps[_propKey19];\n    var _lastProp13 = lastProps[_propKey19];\n\n    if (nextProps.hasOwnProperty(_propKey19) && _nextProp6 !== _lastProp13 && (_nextProp6 != null || _lastProp13 != null)) {\n      setProp(domElement, tag, _propKey19, _nextProp6, nextProps, _lastProp13);\n    }\n  }\n}\n\nfunction getPossibleStandardName(propName) {\n  {\n    var lowerCasedName = propName.toLowerCase();\n\n    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      return null;\n    }\n\n    return possibleStandardNames[lowerCasedName] || null;\n  }\n}\n\nfunction diffHydratedStyles(domElement, value) {\n  if (value != null && typeof value !== 'object') {\n    throw new Error('The `style` prop expects a mapping from style properties to values, ' + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + 'using JSX.');\n  }\n\n  if (canDiffStyleForHydrationWarning) {\n    var expectedStyle = createDangerousStringForStyles(value);\n    var serverValue = domElement.getAttribute('style');\n    warnForPropDifference('style', serverValue, expectedStyle);\n  }\n}\n\nfunction hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n    }\n  } else {\n    if (value == null) ; else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n\n        default:\n          {\n            {\n              checkAttributeStringCoercion(value, propKey);\n            }\n\n            if (serverValue === '' + value) {\n              return;\n            }\n          }\n      }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'function':\n      case 'symbol':\n        return;\n    }\n\n    if (!value) {\n      return;\n    }\n  } else {\n    switch (typeof value) {\n      case 'function':\n      case 'symbol':\n        break;\n\n      default:\n        {\n          if (value) {\n            // If this was a boolean, it doesn't matter what the value is\n            // the fact that we have it is the same as the expected.\n            // As long as it's positive.\n            return;\n          }\n        }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction hydrateOverloadedBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n        return;\n\n      default:\n        if (value === false) {\n          return;\n        }\n\n    }\n  } else {\n    if (value == null) ; else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n          break;\n\n        case 'boolean':\n          if (value === true && serverValue === '') {\n            return;\n          }\n\n          break;\n\n        default:\n          {\n            {\n              checkAttributeStringCoercion(value, propKey);\n            }\n\n            if (serverValue === '' + value) {\n              return;\n            }\n          }\n      }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n        return;\n    }\n  } else {\n    if (value == null) ; else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n          break;\n\n        default:\n          {\n            {\n              checkAttributeStringCoercion(value, attributeName);\n            }\n\n            if (serverValue === '' + value) {\n              return;\n            }\n          }\n      }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n\n      default:\n        if (isNaN(value)) {\n          return;\n        }\n\n    }\n  } else {\n    if (value == null) ; else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n\n        default:\n          {\n            if (isNaN(value)) {\n              // We had an attribute but shouldn't have had one, so read it\n              // for the error message.\n              break;\n            }\n\n            {\n              checkAttributeStringCoercion(value, propKey);\n            }\n\n            if (serverValue === '' + value) {\n              return;\n            }\n          }\n      }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction hydratePositiveNumericAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n\n      default:\n        if (isNaN(value) || value < 1) {\n          return;\n        }\n\n    }\n  } else {\n    if (value == null) ; else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n\n        default:\n          {\n            if (isNaN(value) || value < 1) {\n              // We had an attribute but shouldn't have had one, so read it\n              // for the error message.\n              break;\n            }\n\n            {\n              checkAttributeStringCoercion(value, propKey);\n            }\n\n            if (serverValue === '' + value) {\n              return;\n            }\n          }\n      }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes) {\n  extraAttributes.delete(attributeName);\n  var serverValue = domElement.getAttribute(attributeName);\n\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n    }\n  } else {\n    if (value == null) ; else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n\n        default:\n          {\n            {\n              checkAttributeStringCoercion(value, propKey);\n            }\n\n            var sanitizedValue = sanitizeURL('' + value);\n\n            if (serverValue === sanitizedValue) {\n              return;\n            }\n          }\n      }\n    }\n  }\n\n  warnForPropDifference(propKey, serverValue, value);\n}\n\nfunction diffHydratedCustomComponent(domElement, tag, props, hostContext, extraAttributes) {\n  for (var propKey in props) {\n    if (!props.hasOwnProperty(propKey)) {\n      continue;\n    }\n\n    var value = props[propKey];\n\n    if (value == null) {\n      continue;\n    }\n\n    if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (typeof value !== 'function') {\n        warnForInvalidEventListener(propKey, value);\n      }\n\n      continue;\n    }\n\n    if (props.suppressHydrationWarning === true) {\n      // Don't bother comparing. We're ignoring all these warnings.\n      continue;\n    } // Validate that the properties correspond to their expected values.\n\n\n    switch (propKey) {\n      case 'children': // Checked above already\n\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'defaultValue':\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref':\n        // Noop\n        continue;\n\n      case 'dangerouslySetInnerHTML':\n        var serverHTML = domElement.innerHTML;\n        var nextHtml = value ? value.__html : undefined;\n\n        if (nextHtml != null) {\n          var expectedHTML = normalizeHTML(domElement, nextHtml);\n          warnForPropDifference(propKey, serverHTML, expectedHTML);\n        }\n\n        continue;\n\n      case 'style':\n        extraAttributes.delete(propKey);\n        diffHydratedStyles(domElement, value);\n        continue;\n\n      case 'offsetParent':\n      case 'offsetTop':\n      case 'offsetLeft':\n      case 'offsetWidth':\n      case 'offsetHeight':\n      case 'isContentEditable':\n      case 'outerText':\n      case 'outerHTML':\n\n      // Fall through\n\n      case 'className':\n\n      // Fall through\n\n      default:\n        {\n          // This is a DEV-only path\n          var hostContextDev = hostContext;\n          var hostContextProd = hostContextDev.context;\n\n          if (hostContextProd === HostContextNamespaceNone && tag !== 'svg' && tag !== 'math') {\n            extraAttributes.delete(propKey.toLowerCase());\n          } else {\n            extraAttributes.delete(propKey);\n          }\n\n          var _serverValue = getValueForAttributeOnCustomComponent(domElement, propKey, value);\n\n          warnForPropDifference(propKey, _serverValue, value);\n        }\n    }\n  }\n} // This is the exact URL string we expect that Fizz renders if we provide a function action.\n// We use this for hydration warnings. It needs to be in sync with Fizz. Maybe makes sense\n// as a shared module for that reason.\n\n\nvar EXPECTED_FORM_ACTION_URL = // eslint-disable-next-line no-script-url\n\"javascript:throw new Error('React form unexpectedly submitted.')\";\n\nfunction diffHydratedGenericElement(domElement, tag, props, hostContext, extraAttributes) {\n  for (var propKey in props) {\n    if (!props.hasOwnProperty(propKey)) {\n      continue;\n    }\n\n    var value = props[propKey];\n\n    if (value == null) {\n      continue;\n    }\n\n    if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (typeof value !== 'function') {\n        warnForInvalidEventListener(propKey, value);\n      }\n\n      continue;\n    }\n\n    if (props.suppressHydrationWarning === true) {\n      // Don't bother comparing. We're ignoring all these warnings.\n      continue;\n    } // Validate that the properties correspond to their expected values.\n\n\n    switch (propKey) {\n      case 'children': // Checked above already\n\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'value': // Controlled attributes are not validated\n\n      case 'checked': // TODO: Only ignore them on controlled tags.\n\n      case 'selected':\n      case 'defaultValue':\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref':\n        // Noop\n        continue;\n\n      case 'dangerouslySetInnerHTML':\n        var serverHTML = domElement.innerHTML;\n        var nextHtml = value ? value.__html : undefined;\n\n        if (nextHtml != null) {\n          var expectedHTML = normalizeHTML(domElement, nextHtml);\n          warnForPropDifference(propKey, serverHTML, expectedHTML);\n        }\n\n        continue;\n\n      case 'className':\n        hydrateAttribute(domElement, propKey, 'class', value, extraAttributes);\n        continue;\n\n      case 'tabIndex':\n        hydrateAttribute(domElement, propKey, 'tabindex', value, extraAttributes);\n        continue;\n\n      case 'style':\n        extraAttributes.delete(propKey);\n        diffHydratedStyles(domElement, value);\n        continue;\n\n      case 'multiple':\n        {\n          extraAttributes.delete(propKey);\n          var serverValue = domElement.multiple;\n          warnForPropDifference(propKey, serverValue, value);\n          continue;\n        }\n\n      case 'muted':\n        {\n          extraAttributes.delete(propKey);\n          var _serverValue2 = domElement.muted;\n          warnForPropDifference(propKey, _serverValue2, value);\n          continue;\n        }\n\n      case 'autoFocus':\n        {\n          extraAttributes.delete('autofocus');\n          var _serverValue3 = domElement.autofocus;\n          warnForPropDifference(propKey, _serverValue3, value);\n          continue;\n        }\n\n      case 'src':\n      case 'href':\n\n        hydrateSanitizedAttribute(domElement, propKey, propKey, value, extraAttributes);\n        continue;\n\n      case 'action':\n      case 'formAction':\n        {\n          var _serverValue4 = domElement.getAttribute(propKey);\n\n          if (typeof value === 'function') {\n            extraAttributes.delete(propKey.toLowerCase()); // The server can set these extra properties to implement actions.\n            // So we remove them from the extra attributes warnings.\n\n            if (propKey === 'formAction') {\n              extraAttributes.delete('name');\n              extraAttributes.delete('formenctype');\n              extraAttributes.delete('formmethod');\n              extraAttributes.delete('formtarget');\n            } else {\n              extraAttributes.delete('enctype');\n              extraAttributes.delete('method');\n              extraAttributes.delete('target');\n            } // Ideally we should be able to warn if the server value was not a function\n            // however since the function can return any of these attributes any way it\n            // wants as a custom progressive enhancement, there's nothing to compare to.\n            // We can check if the function has the $FORM_ACTION property on the client\n            // and if it's not, warn, but that's an unnecessary constraint that they\n            // have to have the extra extension that doesn't do anything on the client.\n\n\n            continue;\n          } else if (_serverValue4 === EXPECTED_FORM_ACTION_URL) {\n            extraAttributes.delete(propKey.toLowerCase());\n            warnForPropDifference(propKey, 'function', value);\n            continue;\n          }\n        }\n\n        hydrateSanitizedAttribute(domElement, propKey, propKey.toLowerCase(), value, extraAttributes);\n        continue;\n\n      case 'xlinkHref':\n        hydrateSanitizedAttribute(domElement, propKey, 'xlink:href', value, extraAttributes);\n        continue;\n\n      case 'contentEditable':\n        {\n          // Lower-case Booleanish String\n          hydrateBooleanishAttribute(domElement, propKey, 'contenteditable', value, extraAttributes);\n          continue;\n        }\n\n      case 'spellCheck':\n        {\n          // Lower-case Booleanish String\n          hydrateBooleanishAttribute(domElement, propKey, 'spellcheck', value, extraAttributes);\n          continue;\n        }\n\n      case 'draggable':\n      case 'autoReverse':\n      case 'externalResourcesRequired':\n      case 'focusable':\n      case 'preserveAlpha':\n        {\n          // Case-sensitive Booleanish String\n          hydrateBooleanishAttribute(domElement, propKey, propKey, value, extraAttributes);\n          continue;\n        }\n\n      case 'allowFullScreen':\n      case 'async':\n      case 'autoPlay':\n      case 'controls':\n      case 'default':\n      case 'defer':\n      case 'disabled':\n      case 'disablePictureInPicture':\n      case 'disableRemotePlayback':\n      case 'formNoValidate':\n      case 'hidden':\n      case 'loop':\n      case 'noModule':\n      case 'noValidate':\n      case 'open':\n      case 'playsInline':\n      case 'readOnly':\n      case 'required':\n      case 'reversed':\n      case 'scoped':\n      case 'seamless':\n      case 'itemScope':\n        {\n          // Some of these need to be lower case to remove them from the extraAttributes list.\n          hydrateBooleanAttribute(domElement, propKey, propKey.toLowerCase(), value, extraAttributes);\n          continue;\n        }\n\n      case 'capture':\n      case 'download':\n        {\n          hydrateOverloadedBooleanAttribute(domElement, propKey, propKey, value, extraAttributes);\n          continue;\n        }\n\n      case 'cols':\n      case 'rows':\n      case 'size':\n      case 'span':\n        {\n          hydratePositiveNumericAttribute(domElement, propKey, propKey, value, extraAttributes);\n          continue;\n        }\n\n      case 'rowSpan':\n        {\n          hydrateNumericAttribute(domElement, propKey, 'rowspan', value, extraAttributes);\n          continue;\n        }\n\n      case 'start':\n        {\n          hydrateNumericAttribute(domElement, propKey, propKey, value, extraAttributes);\n          continue;\n        }\n\n      case 'xHeight':\n        hydrateAttribute(domElement, propKey, 'x-height', value, extraAttributes);\n        continue;\n\n      case 'xlinkActuate':\n        hydrateAttribute(domElement, propKey, 'xlink:actuate', value, extraAttributes);\n        continue;\n\n      case 'xlinkArcrole':\n        hydrateAttribute(domElement, propKey, 'xlink:arcrole', value, extraAttributes);\n        continue;\n\n      case 'xlinkRole':\n        hydrateAttribute(domElement, propKey, 'xlink:role', value, extraAttributes);\n        continue;\n\n      case 'xlinkShow':\n        hydrateAttribute(domElement, propKey, 'xlink:show', value, extraAttributes);\n        continue;\n\n      case 'xlinkTitle':\n        hydrateAttribute(domElement, propKey, 'xlink:title', value, extraAttributes);\n        continue;\n\n      case 'xlinkType':\n        hydrateAttribute(domElement, propKey, 'xlink:type', value, extraAttributes);\n        continue;\n\n      case 'xmlBase':\n        hydrateAttribute(domElement, propKey, 'xml:base', value, extraAttributes);\n        continue;\n\n      case 'xmlLang':\n        hydrateAttribute(domElement, propKey, 'xml:lang', value, extraAttributes);\n        continue;\n\n      case 'xmlSpace':\n        hydrateAttribute(domElement, propKey, 'xml:space', value, extraAttributes);\n        continue;\n\n      default:\n        {\n          if ( // shouldIgnoreAttribute\n          // We have already filtered out null/undefined and reserved words.\n          propKey.length > 2 && (propKey[0] === 'o' || propKey[0] === 'O') && (propKey[1] === 'n' || propKey[1] === 'N')) {\n            continue;\n          }\n\n          var attributeName = getAttributeAlias(propKey);\n          var isMismatchDueToBadCasing = false; // This is a DEV-only path\n\n          var hostContextDev = hostContext;\n          var hostContextProd = hostContextDev.context;\n\n          if (hostContextProd === HostContextNamespaceNone && tag !== 'svg' && tag !== 'math') {\n            extraAttributes.delete(attributeName.toLowerCase());\n          } else {\n            var standardName = getPossibleStandardName(propKey);\n\n            if (standardName !== null && standardName !== propKey) {\n              // If an SVG prop is supplied with bad casing, it will\n              // be successfully parsed from HTML, but will produce a mismatch\n              // (and would be incorrectly rendered on the client).\n              // However, we already warn about bad casing elsewhere.\n              // So we'll skip the misleading extra mismatch warning in this case.\n              isMismatchDueToBadCasing = true;\n              extraAttributes.delete(standardName);\n            }\n\n            extraAttributes.delete(attributeName);\n          }\n\n          var _serverValue5 = getValueForAttribute(domElement, attributeName, value);\n\n          if (!isMismatchDueToBadCasing) {\n            warnForPropDifference(propKey, _serverValue5, value);\n          }\n        }\n    }\n  }\n}\n\nfunction diffHydratedProperties(domElement, tag, props, isConcurrentMode, shouldWarnDev, hostContext) {\n  {\n    validatePropertiesInDevelopment(tag, props);\n  } // TODO: Make sure that we check isMounted before firing any of these events.\n\n\n  switch (tag) {\n    case 'dialog':\n      listenToNonDelegatedEvent('cancel', domElement);\n      listenToNonDelegatedEvent('close', domElement);\n      break;\n\n    case 'iframe':\n    case 'object':\n    case 'embed':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the load event.\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n\n    case 'video':\n    case 'audio':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for all the media events.\n      for (var i = 0; i < mediaEventTypes.length; i++) {\n        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n      }\n\n      break;\n\n    case 'source':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the error event.\n      listenToNonDelegatedEvent('error', domElement);\n      break;\n\n    case 'img':\n    case 'image':\n    case 'link':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for error and load events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n\n    case 'details':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the toggle event.\n      listenToNonDelegatedEvent('toggle', domElement);\n      break;\n\n    case 'input':\n      {\n        checkControlledValueProps('input', props);\n      } // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n\n      listenToNonDelegatedEvent('invalid', domElement); // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n\n      validateInputProps(domElement, props); // For input and textarea we current always set the value property at\n      // post mount to force it to diverge from attributes. However, for\n      // option and select we don't quite do the same thing and select\n      // is not resilient to the DOM state changing so we don't do that here.\n      // TODO: Consider not doing this for input and textarea.\n\n      initInput(domElement, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, true);\n      track(domElement);\n      break;\n\n    case 'option':\n      validateOptionProps(domElement, props);\n      break;\n\n    case 'select':\n      {\n        checkControlledValueProps('select', props);\n      } // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      validateSelectProps(domElement, props);\n      break;\n\n    case 'textarea':\n      {\n        checkControlledValueProps('textarea', props);\n      } // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n\n      listenToNonDelegatedEvent('invalid', domElement); // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n\n      validateTextareaProps(domElement, props);\n      initTextarea(domElement, props.value, props.defaultValue, props.children);\n      track(domElement);\n      break;\n  }\n\n  var children = props.children; // For text content children we compare against textContent. This\n  // might match additional HTML that is hidden when we read it using\n  // textContent. E.g. \"foo\" will match \"f<span>oo</span>\" but that still\n  // satisfies our requirement. Our requirement is not to produce perfect\n  // HTML and attributes. Ideally we should preserve structure but it's\n  // ok not to if the visible content is still enough to indicate what\n  // even listeners these nodes might be wired up to.\n  // TODO: Warn if there is more than a single textNode as a child.\n  // TODO: Should we use domElement.firstChild.nodeValue to compare?\n\n  if (typeof children === 'string' || typeof children === 'number') {\n    if (domElement.textContent !== '' + children) {\n      if (props.suppressHydrationWarning !== true) {\n        checkForUnmatchedText(domElement.textContent, children, isConcurrentMode, shouldWarnDev);\n      }\n\n      if (!isConcurrentMode || !enableClientRenderFallbackOnTextMismatch) {\n        // We really should be patching this in the commit phase but since\n        // this only affects legacy mode hydration which is deprecated anyway\n        // we can get away with it.\n        // Host singletons get their children appended and don't use the text\n        // content mechanism.\n        if (tag !== 'body') {\n          domElement.textContent = children;\n        }\n      }\n    }\n  }\n\n  if (props.onScroll != null) {\n    listenToNonDelegatedEvent('scroll', domElement);\n  }\n\n  if (props.onScrollEnd != null) {\n    listenToNonDelegatedEvent('scrollend', domElement);\n  }\n\n  if (props.onClick != null) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(domElement);\n  }\n\n  if (shouldWarnDev) {\n    var extraAttributes = new Set();\n    var attributes = domElement.attributes;\n\n    for (var _i = 0; _i < attributes.length; _i++) {\n      var name = attributes[_i].name.toLowerCase();\n\n      switch (name) {\n        // Controlled attributes are not validated\n        // TODO: Only ignore them on controlled tags.\n        case 'value':\n          break;\n\n        case 'checked':\n          break;\n\n        case 'selected':\n          break;\n\n        default:\n          // Intentionally use the original name.\n          // See discussion in https://github.com/facebook/react/pull/10676.\n          extraAttributes.add(attributes[_i].name);\n      }\n    }\n\n    if (isCustomElement(tag)) {\n      diffHydratedCustomComponent(domElement, tag, props, hostContext, extraAttributes);\n    } else {\n      diffHydratedGenericElement(domElement, tag, props, hostContext, extraAttributes);\n    }\n\n    if (extraAttributes.size > 0 && props.suppressHydrationWarning !== true) {\n      warnForExtraAttributes(extraAttributes);\n    }\n  }\n}\nfunction diffHydratedText(textNode, text, isConcurrentMode) {\n  var isDifferent = textNode.nodeValue !== text;\n  return isDifferent;\n}\nfunction warnForDeletedHydratableElement(parentNode, child) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());\n  }\n}\nfunction warnForDeletedHydratableText(parentNode, child) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Did not expect server HTML to contain the text node \"%s\" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());\n  }\n}\nfunction warnForInsertedHydratedElement(parentNode, tag, props) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());\n  }\n}\nfunction warnForInsertedHydratedText(parentNode, text) {\n  {\n    if (text === '') {\n      // We expect to insert empty text nodes since they're not represented in\n      // the HTML.\n      // TODO: Remove this special case if we can just avoid inserting empty\n      // text nodes.\n      return;\n    }\n\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Expected server HTML to contain a matching text node for \"%s\" in <%s>.', text, parentNode.nodeName.toLowerCase());\n  }\n}\nfunction restoreControlledState(domElement, tag, props) {\n  switch (tag) {\n    case 'input':\n      restoreControlledInputState(domElement, props);\n      return;\n\n    case 'textarea':\n      restoreControlledTextareaState(domElement, props);\n      return;\n\n    case 'select':\n      restoreControlledSelectState(domElement, props);\n      return;\n  }\n}\n\nfunction validateLinkPropsForStyleResource(props) {\n  {\n    // This should only be called when we know we are opting into Resource semantics (i.e. precedence is not null)\n    var href = props.href,\n        onLoad = props.onLoad,\n        onError = props.onError,\n        disabled = props.disabled;\n    var includedProps = [];\n    if (onLoad) includedProps.push('`onLoad`');\n    if (onError) includedProps.push('`onError`');\n    if (disabled != null) includedProps.push('`disabled`');\n    var includedPropsPhrase = propNamesListJoin(includedProps, 'and');\n    includedPropsPhrase += includedProps.length === 1 ? ' prop' : ' props';\n    var withArticlePhrase = includedProps.length === 1 ? 'an ' + includedPropsPhrase : 'the ' + includedPropsPhrase;\n\n    if (includedProps.length) {\n      error('React encountered a <link rel=\"stylesheet\" href=\"%s\" ... /> with a `precedence` prop that' + ' also included %s. The presence of loading and error handlers indicates an intent to manage' + ' the stylesheet loading state from your from your Component code and React will not hoist or' + ' deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet' + ' using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', href, withArticlePhrase, includedPropsPhrase);\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction propNamesListJoin(list, combinator) {\n  switch (list.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return list[0];\n\n    case 2:\n      return list[0] + ' ' + combinator + ' ' + list[1];\n\n    default:\n      return list.slice(0, -1).join(', ') + ', ' + combinator + ' ' + list[list.length - 1];\n  }\n}\n\nvar SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\nvar SUSPENSE_START_DATA = '$';\nvar SUSPENSE_END_DATA = '/$';\nvar SUSPENSE_PENDING_START_DATA = '$?';\nvar SUSPENSE_FALLBACK_START_DATA = '$!';\nvar FORM_STATE_IS_MATCHING = 'F!';\nvar FORM_STATE_IS_NOT_MATCHING = 'F';\nvar STYLE = 'style';\nvar HostContextNamespaceNone = 0;\nvar HostContextNamespaceSvg = 1;\nvar HostContextNamespaceMath = 2;\nvar eventsEnabled = null;\nvar selectionInformation = null;\n\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n\nfunction getRootHostContext(rootContainerInstance) {\n  var type;\n  var context;\n  var nodeType = rootContainerInstance.nodeType;\n\n  switch (nodeType) {\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      {\n        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';\n        var root = rootContainerInstance.documentElement;\n\n        if (root) {\n          var namespaceURI = root.namespaceURI;\n          context = namespaceURI ? getOwnHostContext(namespaceURI) : HostContextNamespaceNone;\n        } else {\n          context = HostContextNamespaceNone;\n        }\n\n        break;\n      }\n\n    default:\n      {\n        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;\n        type = container.tagName;\n        var _namespaceURI = container.namespaceURI;\n\n        if (!_namespaceURI) {\n          switch (type) {\n            case 'svg':\n              context = HostContextNamespaceSvg;\n              break;\n\n            case 'math':\n              context = HostContextNamespaceMath;\n              break;\n\n            default:\n              context = HostContextNamespaceNone;\n              break;\n          }\n        } else {\n          var ownContext = getOwnHostContext(_namespaceURI);\n          context = getChildHostContextProd(ownContext, type);\n        }\n\n        break;\n      }\n  }\n\n  {\n    var validatedTag = type.toLowerCase();\n    var ancestorInfo = updatedAncestorInfoDev(null, validatedTag);\n    return {\n      context: context,\n      ancestorInfo: ancestorInfo\n    };\n  }\n}\n\nfunction getOwnHostContext(namespaceURI) {\n  switch (namespaceURI) {\n    case SVG_NAMESPACE:\n      return HostContextNamespaceSvg;\n\n    case MATH_NAMESPACE:\n      return HostContextNamespaceMath;\n\n    default:\n      return HostContextNamespaceNone;\n  }\n}\n\nfunction getChildHostContextProd(parentNamespace, type) {\n  if (parentNamespace === HostContextNamespaceNone) {\n    // No (or default) parent namespace: potential entry point.\n    switch (type) {\n      case 'svg':\n        return HostContextNamespaceSvg;\n\n      case 'math':\n        return HostContextNamespaceMath;\n\n      default:\n        return HostContextNamespaceNone;\n    }\n  }\n\n  if (parentNamespace === HostContextNamespaceSvg && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HostContextNamespaceNone;\n  } // By default, pass namespace below.\n\n\n  return parentNamespace;\n}\n\nfunction getChildHostContext(parentHostContext, type) {\n  {\n    var parentHostContextDev = parentHostContext;\n    var context = getChildHostContextProd(parentHostContextDev.context, type);\n    var ancestorInfo = updatedAncestorInfoDev(parentHostContextDev.ancestorInfo, type);\n    return {\n      context: context,\n      ancestorInfo: ancestorInfo\n    };\n  }\n}\nfunction getPublicInstance(instance) {\n  return instance;\n}\nfunction prepareForCommit(containerInfo) {\n  eventsEnabled = isEnabled();\n  selectionInformation = getSelectionInformation();\n  var activeInstance = null;\n\n  setEnabled(false);\n  return activeInstance;\n}\nfunction resetAfterCommit(containerInfo) {\n  restoreSelection(selectionInformation);\n  setEnabled(eventsEnabled);\n  eventsEnabled = null;\n  selectionInformation = null;\n}\nfunction createHoistableInstance(type, props, rootContainerInstance, internalInstanceHandle) {\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);\n  var domElement = ownerDocument.createElement(type);\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  setInitialProperties(domElement, type, props);\n  markNodeAsHoistable(domElement);\n  return domElement;\n}\nvar warnedUnknownTags = {\n  // There are working polyfills for <dialog>. Let people use it.\n  dialog: true,\n  // Electron ships a custom <webview> tag to display external web content in\n  // an isolated frame and process.\n  // This tag is not present in non Electron environments such as JSDom which\n  // is often used for testing purposes.\n  // @see https://electronjs.org/docs/api/webview-tag\n  webview: true\n};\nfunction createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n  var hostContextProd;\n\n  {\n    // TODO: take namespace into account when validating.\n    var hostContextDev = hostContext;\n    validateDOMNesting(type, hostContextDev.ancestorInfo);\n    hostContextProd = hostContextDev.context;\n  }\n\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);\n  var domElement;\n\n  switch (hostContextProd) {\n    case HostContextNamespaceSvg:\n      domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);\n      break;\n\n    case HostContextNamespaceMath:\n      domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);\n      break;\n\n    default:\n      switch (type) {\n        case 'svg':\n          {\n            domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);\n            break;\n          }\n\n        case 'math':\n          {\n            domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);\n            break;\n          }\n\n        case 'script':\n          {\n            // Create the script via .innerHTML so its \"parser-inserted\" flag is\n            // set to true and it does not execute\n            var div = ownerDocument.createElement('div');\n\n            div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n            // This is guaranteed to yield a script element.\n\n            var firstChild = div.firstChild;\n            domElement = div.removeChild(firstChild);\n            break;\n          }\n\n        case 'select':\n          {\n            if (typeof props.is === 'string') {\n              domElement = ownerDocument.createElement('select', {\n                is: props.is\n              });\n            } else {\n              // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n              // See discussion in https://github.com/facebook/react/pull/6896\n              // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n              domElement = ownerDocument.createElement('select');\n            }\n\n            if (props.multiple) {\n              domElement.multiple = true;\n            } else if (props.size) {\n              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where\n              // it is possible that no option is selected.\n              //\n              // This is only necessary when a select in \"single selection mode\".\n              domElement.size = props.size;\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (typeof props.is === 'string') {\n              domElement = ownerDocument.createElement(type, {\n                is: props.is\n              });\n            } else {\n              // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n              // See discussion in https://github.com/facebook/react/pull/6896\n              // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n              domElement = ownerDocument.createElement(type);\n            }\n\n            {\n              if (type.indexOf('-') === -1) {\n                // We're not SVG/MathML and we don't have a dash, so we're not a custom element\n                // Even if you use `is`, these should be of known type and lower case.\n                if (type !== type.toLowerCase()) {\n                  error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);\n                }\n\n                if ( // $FlowFixMe[method-unbinding]\n                Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {\n                  warnedUnknownTags[type] = true;\n\n                  error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\n                }\n              }\n            }\n          }\n      }\n\n  }\n\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  return domElement;\n}\nfunction appendInitialChild(parentInstance, child) {\n  parentInstance.appendChild(child);\n}\nfunction finalizeInitialChildren(domElement, type, props, hostContext) {\n  setInitialProperties(domElement, type, props);\n\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      return !!props.autoFocus;\n\n    case 'img':\n      return true;\n\n    default:\n      return false;\n  }\n}\nfunction shouldSetTextContent(type, props) {\n  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;\n}\nfunction createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n  {\n    var hostContextDev = hostContext;\n    var ancestor = hostContextDev.ancestorInfo.current;\n\n    if (ancestor != null) {\n      validateTextNesting(text, ancestor.tag);\n    }\n  }\n\n  var textNode = getOwnerDocumentFromRootContainer(rootContainerInstance).createTextNode(text);\n  precacheFiberNode(internalInstanceHandle, textNode);\n  return textNode;\n}\nfunction getCurrentEventPriority() {\n  var currentEvent = window.event;\n\n  if (currentEvent === undefined) {\n    return DefaultEventPriority;\n  }\n\n  return getEventPriority(currentEvent.type);\n}\nvar currentPopstateTransitionEvent = null;\nfunction shouldAttemptEagerTransition() {\n  var event = window.event;\n\n  if (event && event.type === 'popstate') {\n    // This is a popstate event. Attempt to render any transition during this\n    // event synchronously. Unless we already attempted during this event.\n    if (event === currentPopstateTransitionEvent) {\n      // We already attempted to render this popstate transition synchronously.\n      // Any subsequent attempts must have happened as the result of a derived\n      // update, like startTransition inside useEffect, or useDV. Switch back to\n      // the default behavior for all remaining transitions during the current\n      // popstate event.\n      return false;\n    } else {\n      // Cache the current event in case a derived transition is scheduled.\n      // (Refer to previous branch.)\n      currentPopstateTransitionEvent = event;\n      return true;\n    }\n  } // We're not inside a popstate event.\n\n\n  currentPopstateTransitionEvent = null;\n  return false;\n}\n// if a component just imports ReactDOM (e.g. for findDOMNode).\n// Some environments might not have setTimeout or clearTimeout.\n\nvar scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\nvar cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\nvar noTimeout = -1;\nvar localPromise = typeof Promise === 'function' ? Promise : undefined;\nfunction preparePortalMount(portalInstance) {\n  listenToAllSupportedEvents(portalInstance);\n}\nvar scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {\n  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);\n} : scheduleTimeout; // TODO: Determine the best fallback here.\n\nfunction handleErrorInNextTick(error) {\n  setTimeout(function () {\n    throw error;\n  });\n} // -------------------\nfunction commitMount(domElement, type, newProps, internalInstanceHandle) {\n  // Despite the naming that might imply otherwise, this method only\n  // fires if there is an `Update` effect scheduled during mounting.\n  // This happens if `finalizeInitialChildren` returns `true` (which it\n  // does to implement the `autoFocus` attribute on the client). But\n  // there are also other cases when this might happen (such as patching\n  // up text content during hydration mismatch). So we'll check this again.\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      if (newProps.autoFocus) {\n        domElement.focus();\n      }\n\n      return;\n\n    case 'img':\n      {\n        if (newProps.src) {\n          domElement.src = newProps.src;\n        }\n\n        return;\n      }\n  }\n}\nfunction commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n  // Diff and update the properties.\n  updateProperties(domElement, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with\n  // with current event handlers.\n\n  updateFiberProps(domElement, newProps);\n}\nfunction resetTextContent(domElement) {\n  setTextContent(domElement, '');\n}\nfunction commitTextUpdate(textInstance, oldText, newText) {\n  textInstance.nodeValue = newText;\n}\nfunction appendChild(parentInstance, child) {\n  parentInstance.appendChild(child);\n}\nfunction appendChildToContainer(container, child) {\n  var parentNode;\n\n  if (container.nodeType === COMMENT_NODE) {\n    parentNode = container.parentNode;\n    parentNode.insertBefore(child, container);\n  } else {\n    parentNode = container;\n    parentNode.appendChild(child);\n  } // This container might be used for a portal.\n  // If something inside a portal is clicked, that click should bubble\n  // through the React tree. However, on Mobile Safari the click would\n  // never bubble through the *DOM* tree unless an ancestor with onclick\n  // event exists. So we wouldn't see it and dispatch it.\n  // This is why we ensure that non React root containers have inline onclick\n  // defined.\n  // https://github.com/facebook/react/issues/11918\n\n\n  var reactRootContainer = container._reactRootContainer;\n\n  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(parentNode);\n  }\n}\nfunction insertBefore(parentInstance, child, beforeChild) {\n  parentInstance.insertBefore(child, beforeChild);\n}\nfunction insertInContainerBefore(container, child, beforeChild) {\n  if (container.nodeType === COMMENT_NODE) {\n    container.parentNode.insertBefore(child, beforeChild);\n  } else {\n    container.insertBefore(child, beforeChild);\n  }\n}\n\nfunction removeChild(parentInstance, child) {\n  parentInstance.removeChild(child);\n}\nfunction removeChildFromContainer(container, child) {\n  if (container.nodeType === COMMENT_NODE) {\n    container.parentNode.removeChild(child);\n  } else {\n    container.removeChild(child);\n  }\n}\nfunction clearSuspenseBoundary(parentInstance, suspenseInstance) {\n  var node = suspenseInstance; // Delete all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  var depth = 0;\n\n  do {\n    var nextNode = node.nextSibling;\n    parentInstance.removeChild(node);\n\n    if (nextNode && nextNode.nodeType === COMMENT_NODE) {\n      var data = nextNode.data;\n\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.\n\n          retryIfBlockedOn(suspenseInstance);\n          return;\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {\n        depth++;\n      }\n    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n    node = nextNode;\n  } while (node); // TODO: Warn, we didn't find the end comment boundary.\n  // Retry if any event replaying was blocked on this.\n\n\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction clearSuspenseBoundaryFromContainer(container, suspenseInstance) {\n  if (container.nodeType === COMMENT_NODE) {\n    clearSuspenseBoundary(container.parentNode, suspenseInstance);\n  } else if (container.nodeType === ELEMENT_NODE) {\n    clearSuspenseBoundary(container, suspenseInstance);\n  } else ; // Retry if any event replaying was blocked on this.\n\n\n  retryIfBlockedOn(container);\n}\nfunction hideInstance(instance) {\n  // TODO: Does this work for all element types? What about MathML? Should we\n  // pass host context to this method?\n  instance = instance;\n  var style = instance.style; // $FlowFixMe[method-unbinding]\n\n  if (typeof style.setProperty === 'function') {\n    style.setProperty('display', 'none', 'important');\n  } else {\n    style.display = 'none';\n  }\n}\nfunction hideTextInstance(textInstance) {\n  textInstance.nodeValue = '';\n}\nfunction unhideInstance(instance, props) {\n  instance = instance;\n  var styleProp = props[STYLE];\n  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;\n  instance.style.display = display == null || typeof display === 'boolean' ? '' : // The value would've errored already if it wasn't safe.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  ('' + display).trim();\n}\nfunction unhideTextInstance(textInstance, text) {\n  textInstance.nodeValue = text;\n}\nfunction clearContainer(container) {\n  var nodeType = container.nodeType;\n\n  if (nodeType === DOCUMENT_NODE) {\n    clearContainerSparingly(container);\n  } else if (nodeType === ELEMENT_NODE) {\n    switch (container.nodeName) {\n      case 'HEAD':\n      case 'HTML':\n      case 'BODY':\n        clearContainerSparingly(container);\n        return;\n\n      default:\n        {\n          container.textContent = '';\n        }\n    }\n  }\n}\n\nfunction clearContainerSparingly(container) {\n  var node;\n  var nextNode = container.firstChild;\n\n  if (nextNode && nextNode.nodeType === DOCUMENT_TYPE_NODE) {\n    nextNode = nextNode.nextSibling;\n  }\n\n  while (nextNode) {\n    node = nextNode;\n    nextNode = nextNode.nextSibling;\n\n    switch (node.nodeName) {\n      case 'HTML':\n      case 'HEAD':\n      case 'BODY':\n        {\n          var element = node;\n          clearContainerSparingly(element); // If these singleton instances had previously been rendered with React they\n          // may still hold on to references to the previous fiber tree. We detatch them\n          // prospectively to reset them to a baseline starting state since we cannot create\n          // new instances.\n\n          detachDeletedInstance(element);\n          continue;\n        }\n      // Script tags are retained to avoid an edge case bug. Normally scripts will execute if they\n      // are ever inserted into the DOM. However when streaming if a script tag is opened but not\n      // yet closed some browsers create and insert the script DOM Node but the script cannot execute\n      // yet until the closing tag is parsed. If something causes React to call clearContainer while\n      // this DOM node is in the document but not yet executable the DOM node will be removed from the\n      // document and when the script closing tag comes in the script will not end up running. This seems\n      // to happen in Chrome/Firefox but not Safari at the moment though this is not necessarily specified\n      // behavior so it could change in future versions of browsers. While leaving all scripts is broader\n      // than strictly necessary this is the least amount of additional code to avoid this breaking\n      // edge case.\n      //\n      // Style tags are retained because they may likely come from 3rd party scripts and extensions\n\n      case 'SCRIPT':\n      case 'STYLE':\n        {\n          continue;\n        }\n      // Stylesheet tags are retained because tehy may likely come from 3rd party scripts and extensions\n\n      case 'LINK':\n        {\n          if (node.rel.toLowerCase() === 'stylesheet') {\n            continue;\n          }\n        }\n    }\n\n    container.removeChild(node);\n  }\n\n  return;\n} // Making this so we can eventually move all of the instance caching to the commit phase.\nfunction isHydratableText(text) {\n  return text !== '';\n}\nfunction canHydrateInstance(instance, type, props, inRootOrSingleton) {\n  while (instance.nodeType === ELEMENT_NODE) {\n    var element = instance;\n    var anyProps = props;\n\n    if (element.nodeName.toLowerCase() !== type.toLowerCase()) {\n      if (!inRootOrSingleton) {\n        // Usually we error for mismatched tags.\n        if (element.nodeName === 'INPUT' && element.type === 'hidden') ; else {\n          return null;\n        }\n      } // In root or singleton parents we skip past mismatched instances.\n\n    } else if (!inRootOrSingleton) {\n      // Match\n      if (type === 'input' && element.type === 'hidden') {\n        {\n          checkAttributeStringCoercion(anyProps.name, 'name');\n        }\n\n        var name = anyProps.name == null ? null : '' + anyProps.name;\n\n        if (anyProps.type !== 'hidden' || element.getAttribute('name') !== name) ; else {\n          return element;\n        }\n      } else {\n        return element;\n      }\n    } else if (isMarkedHoistable(element)) ; else {\n      // We have an Element with the right type.\n      // We are going to try to exclude it if we can definitely identify it as a hoisted Node or if\n      // we can guess that the node is likely hoisted or was inserted by a 3rd party script or browser extension\n      // using high entropy attributes for certain types. This technique will fail for strange insertions like\n      // extension prepending <div> in the <body> but that already breaks before and that is an edge case.\n      switch (type) {\n        // case 'title':\n        //We assume all titles are matchable. You should only have one in the Document, at least in a hoistable scope\n        // and if you are a HostComponent with type title we must either be in an <svg> context or this title must have an `itemProp` prop.\n        case 'meta':\n          {\n            // The only way to opt out of hoisting meta tags is to give it an itemprop attribute. We assume there will be\n            // not 3rd party meta tags that are prepended, accepting the cases where this isn't true because meta tags\n            // are usually only functional for SSR so even in a rare case where we did bind to an injected tag the runtime\n            // implications are minimal\n            if (!element.hasAttribute('itemprop')) {\n              // This is a Hoistable\n              break;\n            }\n\n            return element;\n          }\n\n        case 'link':\n          {\n            // Links come in many forms and we do expect 3rd parties to inject them into <head> / <body>. We exclude known resources\n            // and then use high-entroy attributes like href which are almost always used and almost always unique to filter out unlikely\n            // matches.\n            var rel = element.getAttribute('rel');\n\n            if (rel === 'stylesheet' && element.hasAttribute('data-precedence')) {\n              // This is a stylesheet resource\n              break;\n            } else if (rel !== anyProps.rel || element.getAttribute('href') !== (anyProps.href == null ? null : anyProps.href) || element.getAttribute('crossorigin') !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) || element.getAttribute('title') !== (anyProps.title == null ? null : anyProps.title)) {\n              // rel + href should usually be enough to uniquely identify a link however crossOrigin can vary for rel preconnect\n              // and title could vary for rel alternate\n              break;\n            }\n\n            return element;\n          }\n\n        case 'style':\n          {\n            // Styles are hard to match correctly. We can exclude known resources but otherwise we accept the fact that a non-hoisted style tags\n            // in <head> or <body> are likely never going to be unmounted given their position in the document and the fact they likely hold global styles\n            if (element.hasAttribute('data-precedence')) {\n              // This is a style resource\n              break;\n            }\n\n            return element;\n          }\n\n        case 'script':\n          {\n            // Scripts are a little tricky, we exclude known resources and then similar to links try to use high-entropy attributes\n            // to reject poor matches. One challenge with scripts are inline scripts. We don't attempt to check text content which could\n            // in theory lead to a hydration error later if a 3rd party injected an inline script before the React rendered nodes.\n            // Falling back to client rendering if this happens should be seemless though so we will try this hueristic and revisit later\n            // if we learn it is problematic\n            var srcAttr = element.getAttribute('src');\n\n            if (srcAttr !== (anyProps.src == null ? null : anyProps.src) || element.getAttribute('type') !== (anyProps.type == null ? null : anyProps.type) || element.getAttribute('crossorigin') !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)) {\n              // This script is for a different src/type/crossOrigin. It may be a script resource\n              // or it may just be a mistmatch\n              if (srcAttr && element.hasAttribute('async') && !element.hasAttribute('itemprop')) {\n                // This is an async script resource\n                break;\n              }\n            }\n\n            return element;\n          }\n\n        default:\n          {\n            // We have excluded the most likely cases of mismatch between hoistable tags, 3rd party script inserted tags,\n            // and browser extension inserted tags. While it is possible this is not the right match it is a decent hueristic\n            // that should work in the vast majority of cases.\n            return element;\n          }\n      }\n    }\n\n    var nextInstance = getNextHydratableSibling(element);\n\n    if (nextInstance === null) {\n      break;\n    }\n\n    instance = nextInstance;\n  } // This is a suspense boundary or Text node or we got the end.\n  // Suspense Boundaries are never expected to be injected by 3rd parties. If we see one it should be matched\n  // and this is a hydration error.\n  // Text Nodes are also not expected to be injected by 3rd parties. This is less of a guarantee for <body>\n  // but it seems reasonable and conservative to reject this as a hydration error as well\n\n\n  return null;\n}\nfunction canHydrateTextInstance(instance, text, inRootOrSingleton) {\n  // Empty strings are not parsed by HTML so there won't be a correct match here.\n  if (text === '') return null;\n\n  while (instance.nodeType !== TEXT_NODE) {\n    if (instance.nodeType === ELEMENT_NODE && instance.nodeName === 'INPUT' && instance.type === 'hidden') ; else if (!inRootOrSingleton) {\n      return null;\n    }\n\n    var nextInstance = getNextHydratableSibling(instance);\n\n    if (nextInstance === null) {\n      return null;\n    }\n\n    instance = nextInstance;\n  } // This has now been refined to a text node.\n\n\n  return instance;\n}\nfunction canHydrateSuspenseInstance(instance, inRootOrSingleton) {\n  while (instance.nodeType !== COMMENT_NODE) {\n    if (!inRootOrSingleton) {\n      return null;\n    }\n\n    var nextInstance = getNextHydratableSibling(instance);\n\n    if (nextInstance === null) {\n      return null;\n    }\n\n    instance = nextInstance;\n  } // This has now been refined to a suspense node.\n\n\n  return instance;\n}\nfunction isSuspenseInstancePending(instance) {\n  return instance.data === SUSPENSE_PENDING_START_DATA;\n}\nfunction isSuspenseInstanceFallback(instance) {\n  return instance.data === SUSPENSE_FALLBACK_START_DATA;\n}\nfunction getSuspenseInstanceFallbackErrorDetails(instance) {\n  var dataset = instance.nextSibling && instance.nextSibling.dataset;\n  var digest, message, stack;\n\n  if (dataset) {\n    digest = dataset.dgst;\n\n    {\n      message = dataset.msg;\n      stack = dataset.stck;\n    }\n  }\n\n  {\n    return {\n      message: message,\n      digest: digest,\n      stack: stack\n    };\n  }\n}\nfunction registerSuspenseInstanceRetry(instance, callback) {\n  instance._reactRetry = callback;\n}\nfunction canHydrateFormStateMarker(instance, inRootOrSingleton) {\n  while (instance.nodeType !== COMMENT_NODE) {\n    if (!inRootOrSingleton) {\n      return null;\n    }\n\n    var nextInstance = getNextHydratableSibling(instance);\n\n    if (nextInstance === null) {\n      return null;\n    }\n\n    instance = nextInstance;\n  }\n\n  var nodeData = instance.data;\n\n  if (nodeData === FORM_STATE_IS_MATCHING || nodeData === FORM_STATE_IS_NOT_MATCHING) {\n    var markerInstance = instance;\n    return markerInstance;\n  }\n\n  return null;\n}\nfunction isFormStateMarkerMatching(markerInstance) {\n  return markerInstance.data === FORM_STATE_IS_MATCHING;\n}\n\nfunction getNextHydratable(node) {\n  // Skip non-hydratable nodes.\n  for (; node != null; node = node.nextSibling) {\n    var nodeType = node.nodeType;\n\n    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {\n      break;\n    }\n\n    if (nodeType === COMMENT_NODE) {\n      var nodeData = node.data;\n\n      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA || (nodeData === FORM_STATE_IS_MATCHING || nodeData === FORM_STATE_IS_NOT_MATCHING)) {\n        break;\n      }\n\n      if (nodeData === SUSPENSE_END_DATA) {\n        return null;\n      }\n    }\n  }\n\n  return node;\n}\n\nfunction getNextHydratableSibling(instance) {\n  return getNextHydratable(instance.nextSibling);\n}\nfunction getFirstHydratableChild(parentInstance) {\n  return getNextHydratable(parentInstance.firstChild);\n}\nfunction getFirstHydratableChildWithinContainer(parentContainer) {\n  return getNextHydratable(parentContainer.firstChild);\n}\nfunction getFirstHydratableChildWithinSuspenseInstance(parentInstance) {\n  return getNextHydratable(parentInstance.nextSibling);\n}\nfunction validateHydratableInstance(type, props, hostContext) {\n  {\n    // TODO: take namespace into account when validating.\n    var hostContextDev = hostContext;\n    return validateDOMNesting(type, hostContextDev.ancestorInfo);\n  }\n}\nfunction hydrateInstance(instance, type, props, hostContext, internalInstanceHandle, shouldWarnDev) {\n  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events\n  // get attached.\n\n  updateFiberProps(instance, props); // TODO: Temporary hack to check if we're in a concurrent root. We can delete\n  // when the legacy root API is removed.\n\n  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;\n  diffHydratedProperties(instance, type, props, isConcurrentMode, shouldWarnDev, hostContext);\n}\nfunction validateHydratableTextInstance(text, hostContext) {\n  {\n    var hostContextDev = hostContext;\n    var ancestor = hostContextDev.ancestorInfo.current;\n\n    if (ancestor != null) {\n      return validateTextNesting(text, ancestor.tag);\n    }\n  }\n\n  return true;\n}\nfunction hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {\n  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete\n  return diffHydratedText(textInstance, text);\n}\nfunction hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {\n  precacheFiberNode(internalInstanceHandle, suspenseInstance);\n}\nfunction getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {\n  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  var depth = 0;\n\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      var data = node.data;\n\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          return getNextHydratableSibling(node);\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\n        depth++;\n      }\n    }\n\n    node = node.nextSibling;\n  } // TODO: Warn, we didn't find the end comment boundary.\n\n\n  return null;\n} // Returns the SuspenseInstance if this node is a direct child of a\n// SuspenseInstance. I.e. if its previous sibling is a Comment with\n// SUSPENSE_x_START_DATA. Otherwise, null.\n\nfunction getParentSuspenseInstance(targetInstance) {\n  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  var depth = 0;\n\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      var data = node.data;\n\n      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\n        if (depth === 0) {\n          return node;\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_END_DATA) {\n        depth++;\n      }\n    }\n\n    node = node.previousSibling;\n  }\n\n  return null;\n}\nfunction commitHydratedContainer(container) {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(container);\n}\nfunction commitHydratedSuspenseInstance(suspenseInstance) {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction shouldDeleteUnhydratedTailInstances(parentType) {\n  return parentType !== 'form' && parentType !== 'button';\n}\nfunction didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode, shouldWarnDev) {\n  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);\n}\nfunction didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode, shouldWarnDev) {\n  if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);\n  }\n}\nfunction didNotHydrateInstanceWithinContainer(parentContainer, instance) {\n  {\n    if (instance.nodeType === ELEMENT_NODE) {\n      warnForDeletedHydratableElement(parentContainer, instance);\n    } else if (instance.nodeType === COMMENT_NODE) ; else {\n      warnForDeletedHydratableText(parentContainer, instance);\n    }\n  }\n}\nfunction didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {\n  {\n    // $FlowFixMe[incompatible-type]: Only Element or Document can be parent nodes.\n    var parentNode = parentInstance.parentNode;\n\n    if (parentNode !== null) {\n      if (instance.nodeType === ELEMENT_NODE) {\n        warnForDeletedHydratableElement(parentNode, instance);\n      } else if (instance.nodeType === COMMENT_NODE) ; else {\n        warnForDeletedHydratableText(parentNode, instance);\n      }\n    }\n  }\n}\nfunction didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {\n  {\n    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n      if (instance.nodeType === ELEMENT_NODE) {\n        warnForDeletedHydratableElement(parentInstance, instance);\n      } else if (instance.nodeType === COMMENT_NODE) ; else {\n        warnForDeletedHydratableText(parentInstance, instance);\n      }\n    }\n  }\n}\nfunction didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {\n  {\n    warnForInsertedHydratedElement(parentContainer, type);\n  }\n}\nfunction didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {\n  {\n    warnForInsertedHydratedText(parentContainer, text);\n  }\n}\nfunction didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {\n  {\n    // $FlowFixMe[incompatible-type]: Only Element or Document can be parent nodes.\n    var parentNode = parentInstance.parentNode;\n    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);\n  }\n}\nfunction didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {\n  {\n    // $FlowFixMe[incompatible-type]: Only Element or Document can be parent nodes.\n    var parentNode = parentInstance.parentNode;\n    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);\n  }\n}\nfunction didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {\n  {\n    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n      warnForInsertedHydratedElement(parentInstance, type);\n    }\n  }\n}\nfunction didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {\n  {\n    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n      warnForInsertedHydratedText(parentInstance, text);\n    }\n  }\n}\nfunction errorHydratingContainer(parentContainer) {\n  {\n    // TODO: This gets logged by onRecoverableError, too, so we should be\n    // able to remove it.\n    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());\n  }\n} // -------------------\nfunction isHostSingletonType(type) {\n  return type === 'html' || type === 'head' || type === 'body';\n}\nfunction resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {\n  {\n    var hostContextDev = hostContext;\n\n    if (validateDOMNestingDev) {\n      validateDOMNesting(type, hostContextDev.ancestorInfo);\n    }\n  }\n\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);\n\n  switch (type) {\n    case 'html':\n      {\n        var documentElement = ownerDocument.documentElement;\n\n        if (!documentElement) {\n          throw new Error('React expected an <html> element (document.documentElement) to exist in the Document but one was' + ' not found. React never removes the documentElement for any Document it renders into so' + ' the cause is likely in some other script running on this page.');\n        }\n\n        return documentElement;\n      }\n\n    case 'head':\n      {\n        var head = ownerDocument.head;\n\n        if (!head) {\n          throw new Error('React expected a <head> element (document.head) to exist in the Document but one was' + ' not found. React never removes the head for any Document it renders into so' + ' the cause is likely in some other script running on this page.');\n        }\n\n        return head;\n      }\n\n    case 'body':\n      {\n        var body = ownerDocument.body;\n\n        if (!body) {\n          throw new Error('React expected a <body> element (document.body) to exist in the Document but one was' + ' not found. React never removes the body for any Document it renders into so' + ' the cause is likely in some other script running on this page.');\n        }\n\n        return body;\n      }\n\n    default:\n      {\n        throw new Error('resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.');\n      }\n  }\n}\nfunction acquireSingletonInstance(type, props, instance, internalInstanceHandle) {\n  {\n    var currentInstanceHandle = getInstanceFromNode(instance);\n\n    if (currentInstanceHandle) {\n      var tagName = instance.tagName.toLowerCase();\n\n      error('You are mounting a new %s component when a previous one has not first unmounted. It is an' + ' error to render more than one %s component at a time and attributes and children of these' + ' components will likely fail in unpredictable ways. Please only render a single instance of' + ' <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.', tagName, tagName, tagName);\n    }\n\n    switch (type) {\n      case 'html':\n      case 'head':\n      case 'body':\n        {\n          break;\n        }\n\n      default:\n        {\n          error('acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.');\n        }\n    }\n  }\n\n  var attributes = instance.attributes;\n\n  while (attributes.length) {\n    instance.removeAttributeNode(attributes[0]);\n  }\n\n  setInitialProperties(instance, type, props);\n  precacheFiberNode(internalInstanceHandle, instance);\n  updateFiberProps(instance, props);\n}\nfunction releaseSingletonInstance(instance) {\n  var attributes = instance.attributes;\n\n  while (attributes.length) {\n    instance.removeAttributeNode(attributes[0]);\n  }\n\n  detachDeletedInstance(instance);\n}\nfunction clearSingleton(instance) {\n  var element = instance;\n  var node = element.firstChild;\n\n  while (node) {\n    var nextNode = node.nextSibling;\n    var nodeName = node.nodeName;\n\n    if (isMarkedHoistable(node) || nodeName === 'HEAD' || nodeName === 'BODY' || nodeName === 'SCRIPT' || nodeName === 'STYLE' || nodeName === 'LINK' && node.rel.toLowerCase() === 'stylesheet') ; else {\n      element.removeChild(node);\n    }\n\n    node = nextNode;\n  }\n\n  return;\n} // -------------------\nvar NotLoaded =\n/*       */\n0;\nvar Loaded =\n/*          */\n1;\nvar Errored =\n/*         */\n2;\nvar Settled =\n/*         */\n3;\nvar Inserted =\n/*        */\n4;\nfunction prepareToCommitHoistables() {\n  tagCaches = null;\n} // global collections of Resources\n\nvar preloadPropsMap = new Map();\nvar preconnectsSet = new Set(); // getRootNode is missing from IE and old jsdom versions\n\nfunction getHoistableRoot(container) {\n  // $FlowFixMe[method-unbinding]\n  return typeof container.getRootNode === 'function' ?\n  /* $FlowFixMe[incompatible-return] Flow types this as returning a `Node`,\n   * but it's either a `Document` or `ShadowRoot`. */\n  container.getRootNode() : container.ownerDocument;\n}\n\nfunction getCurrentResourceRoot() {\n  var currentContainer = getCurrentRootHostContainer();\n  return currentContainer ? getHoistableRoot(currentContainer) : null;\n}\n\nfunction getDocumentFromRoot(root) {\n  return root.ownerDocument || root;\n} // We want this to be the default dispatcher on ReactDOMSharedInternals but we don't want to mutate\n// internals in Module scope. Instead we export it and Internals will import it. There is already a cycle\n// from Internals -> ReactDOM -> HostConfig -> Internals so this doesn't introduce a new one.\n\n\nvar ReactDOMClientDispatcher = {\n  prefetchDNS: prefetchDNS$1,\n  preconnect: preconnect$1,\n  preload: preload$1,\n  preloadModule: preloadModule$1,\n  preinitStyle: preinitStyle,\n  preinitScript: preinitScript,\n  preinitModuleScript: preinitModuleScript\n}; // We expect this to get inlined. It is a function mostly to communicate the special nature of\n// how we resolve the HoistableRoot for ReactDOM.pre*() methods. Because we support calling\n// these methods outside of render there is no way to know which Document or ShadowRoot is 'scoped'\n// and so we have to fall back to something universal. Currently we just refer to the global document.\n// This is notable because nowhere else in ReactDOM do we actually reference the global document or window\n// because we may be rendering inside an iframe.\n\nfunction getDocumentForImperativeFloatMethods() {\n  return document;\n}\n\nfunction preconnectAs(rel, href, crossOrigin) {\n  var ownerDocument = getDocumentForImperativeFloatMethods();\n\n  if (typeof href === 'string' && href) {\n    var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);\n    var key = \"link[rel=\\\"\" + rel + \"\\\"][href=\\\"\" + limitedEscapedHref + \"\\\"]\";\n\n    if (typeof crossOrigin === 'string') {\n      key += \"[crossorigin=\\\"\" + crossOrigin + \"\\\"]\";\n    }\n\n    if (!preconnectsSet.has(key)) {\n      preconnectsSet.add(key);\n      var preconnectProps = {\n        rel: rel,\n        crossOrigin: crossOrigin,\n        href: href\n      };\n\n      if (null === ownerDocument.querySelector(key)) {\n        var instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', preconnectProps);\n        markNodeAsHoistable(instance);\n        ownerDocument.head.appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction prefetchDNS$1(href) {\n\n  preconnectAs('dns-prefetch', href, null);\n}\n\nfunction preconnect$1(href, crossOrigin) {\n\n  preconnectAs('preconnect', href, crossOrigin);\n}\n\nfunction preload$1(href, as, options) {\n\n  var ownerDocument = getDocumentForImperativeFloatMethods();\n\n  if (href && as && ownerDocument) {\n    var preloadSelector = \"link[rel=\\\"preload\\\"][as=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(as) + \"\\\"]\";\n\n    if (as === 'image') {\n      if (options && options.imageSrcSet) {\n        preloadSelector += \"[imagesrcset=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSrcSet) + \"\\\"]\";\n\n        if (typeof options.imageSizes === 'string') {\n          preloadSelector += \"[imagesizes=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSizes) + \"\\\"]\";\n        }\n      } else {\n        preloadSelector += \"[href=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(href) + \"\\\"]\";\n      }\n    } else {\n      preloadSelector += \"[href=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(href) + \"\\\"]\";\n    } // Some preloads are keyed under their selector. This happens when the preload is for\n    // an arbitrary type. Other preloads are keyed under the resource key they represent a preload for.\n    // Here we figure out which key to use to determine if we have a preload already.\n\n\n    var key = preloadSelector;\n\n    switch (as) {\n      case 'style':\n        key = getStyleKey(href);\n        break;\n\n      case 'script':\n        key = getScriptKey(href);\n        break;\n    }\n\n    if (!preloadPropsMap.has(key)) {\n      var preloadProps = assign({\n        rel: 'preload',\n        // There is a bug in Safari where imageSrcSet is not respected on preload links\n        // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n        // This harms older browers that do not support imageSrcSet by making their preloads not work\n        // but this population is shrinking fast and is already small so we accept this tradeoff.\n        href: as === 'image' && options && options.imageSrcSet ? undefined : href,\n        as: as\n      }, options);\n\n      preloadPropsMap.set(key, preloadProps);\n\n      if (null === ownerDocument.querySelector(preloadSelector)) {\n        if (as === 'style' && ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {\n          // We already have a stylesheet for this key. We don't need to preload it.\n          return;\n        } else if (as === 'script' && ownerDocument.querySelector(getScriptSelectorFromKey(key))) {\n          // We already have a stylesheet for this key. We don't need to preload it.\n          return;\n        }\n\n        var instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', preloadProps);\n        markNodeAsHoistable(instance);\n        ownerDocument.head.appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction preloadModule$1(href, options) {\n\n  var ownerDocument = getDocumentForImperativeFloatMethods();\n\n  if (href) {\n    var as = options && typeof options.as === 'string' ? options.as : 'script';\n    var preloadSelector = \"link[rel=\\\"modulepreload\\\"][as=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(as) + \"\\\"][href=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(href) + \"\\\"]\"; // Some preloads are keyed under their selector. This happens when the preload is for\n    // an arbitrary type. Other preloads are keyed under the resource key they represent a preload for.\n    // Here we figure out which key to use to determine if we have a preload already.\n\n    var key = preloadSelector;\n\n    switch (as) {\n      case 'audioworklet':\n      case 'paintworklet':\n      case 'serviceworker':\n      case 'sharedworker':\n      case 'worker':\n      case 'script':\n        {\n          key = getScriptKey(href);\n          break;\n        }\n    }\n\n    if (!preloadPropsMap.has(key)) {\n      var props = assign({\n        rel: 'modulepreload',\n        href: href\n      }, options);\n\n      preloadPropsMap.set(key, props);\n\n      if (null === ownerDocument.querySelector(preloadSelector)) {\n        switch (as) {\n          case 'audioworklet':\n          case 'paintworklet':\n          case 'serviceworker':\n          case 'sharedworker':\n          case 'worker':\n          case 'script':\n            {\n              if (ownerDocument.querySelector(getScriptSelectorFromKey(key))) {\n                return;\n              }\n            }\n        }\n\n        var instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', props);\n        markNodeAsHoistable(instance);\n        ownerDocument.head.appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction preinitStyle(href, precedence, options) {\n\n  var ownerDocument = getDocumentForImperativeFloatMethods();\n\n  if (href) {\n    var styles = getResourcesFromRoot(ownerDocument).hoistableStyles;\n    var key = getStyleKey(href);\n    precedence = precedence || 'default'; // Check if this resource already exists\n\n    var resource = styles.get(key);\n\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    }\n\n    var state = {\n      loading: NotLoaded,\n      preload: null\n    }; // Attempt to hydrate instance from DOM\n\n    var instance = ownerDocument.querySelector(getStylesheetSelectorFromKey(key));\n\n    if (instance) {\n      state.loading = Loaded | Inserted;\n    } else {\n      // Construct a new instance and insert it\n      var stylesheetProps = assign({\n        rel: 'stylesheet',\n        href: href,\n        'data-precedence': precedence\n      }, options);\n\n      var preloadProps = preloadPropsMap.get(key);\n\n      if (preloadProps) {\n        adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n      }\n\n      var link = instance = ownerDocument.createElement('link');\n      markNodeAsHoistable(link);\n      setInitialProperties(link, 'link', stylesheetProps);\n      link._p = new Promise(function (resolve, reject) {\n        link.onload = resolve;\n        link.onerror = reject;\n      });\n      link.addEventListener('load', function () {\n        state.loading |= Loaded;\n      });\n      link.addEventListener('error', function () {\n        state.loading |= Errored;\n      });\n      state.loading |= Inserted;\n      insertStylesheet(instance, precedence, ownerDocument);\n    } // Construct a Resource and cache it\n\n\n    resource = {\n      type: 'stylesheet',\n      instance: instance,\n      count: 1,\n      state: state\n    };\n    styles.set(key, resource);\n    return;\n  }\n}\n\nfunction preinitScript(src, options) {\n\n  var ownerDocument = getDocumentForImperativeFloatMethods();\n\n  if (src) {\n    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;\n    var key = getScriptKey(src); // Check if this resource already exists\n\n    var resource = scripts.get(key);\n\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    } // Attempt to hydrate instance from DOM\n\n\n    var instance = ownerDocument.querySelector(getScriptSelectorFromKey(key));\n\n    if (!instance) {\n      // Construct a new instance and insert it\n      var scriptProps = assign({\n        src: src,\n        async: true\n      }, options); // Adopt certain preload props\n\n\n      var preloadProps = preloadPropsMap.get(key);\n\n      if (preloadProps) {\n        adoptPreloadPropsForScript(scriptProps, preloadProps);\n      }\n\n      instance = ownerDocument.createElement('script');\n      markNodeAsHoistable(instance);\n      setInitialProperties(instance, 'link', scriptProps);\n      ownerDocument.head.appendChild(instance);\n    } // Construct a Resource and cache it\n\n\n    resource = {\n      type: 'script',\n      instance: instance,\n      count: 1,\n      state: null\n    };\n    scripts.set(key, resource);\n    return;\n  }\n}\n\nfunction preinitModuleScript(src, options) {\n\n  var ownerDocument = getDocumentForImperativeFloatMethods();\n\n  if (src) {\n    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;\n    var key = getScriptKey(src); // Check if this resource already exists\n\n    var resource = scripts.get(key);\n\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    } // Attempt to hydrate instance from DOM\n\n\n    var instance = ownerDocument.querySelector(getScriptSelectorFromKey(key));\n\n    if (!instance) {\n      // Construct a new instance and insert it\n      var scriptProps = assign({\n        src: src,\n        async: true,\n        type: 'module'\n      }, options); // Adopt certain preload props\n\n\n      var preloadProps = preloadPropsMap.get(key);\n\n      if (preloadProps) {\n        adoptPreloadPropsForScript(scriptProps, preloadProps);\n      }\n\n      instance = ownerDocument.createElement('script');\n      markNodeAsHoistable(instance);\n      setInitialProperties(instance, 'link', scriptProps);\n      ownerDocument.head.appendChild(instance);\n    } // Construct a Resource and cache it\n\n\n    resource = {\n      type: 'script',\n      instance: instance,\n      count: 1,\n      state: null\n    };\n    scripts.set(key, resource);\n    return;\n  }\n} // This function is called in begin work and we should always have a currentDocument set\n\n\nfunction getResource(type, currentProps, pendingProps) {\n  var resourceRoot = getCurrentResourceRoot();\n\n  if (!resourceRoot) {\n    throw new Error('\"resourceRoot\" was expected to exist. This is a bug in React.');\n  }\n\n  switch (type) {\n    case 'meta':\n    case 'title':\n      {\n        return null;\n      }\n\n    case 'style':\n      {\n        if (typeof pendingProps.precedence === 'string' && typeof pendingProps.href === 'string') {\n          var key = getStyleKey(pendingProps.href);\n          var styles = getResourcesFromRoot(resourceRoot).hoistableStyles;\n          var resource = styles.get(key);\n\n          if (!resource) {\n            resource = {\n              type: 'style',\n              instance: null,\n              count: 0,\n              state: null\n            };\n            styles.set(key, resource);\n          }\n\n          return resource;\n        }\n\n        return {\n          type: 'void',\n          instance: null,\n          count: 0,\n          state: null\n        };\n      }\n\n    case 'link':\n      {\n        if (pendingProps.rel === 'stylesheet' && typeof pendingProps.href === 'string' && typeof pendingProps.precedence === 'string') {\n          var qualifiedProps = pendingProps;\n\n          var _key = getStyleKey(qualifiedProps.href);\n\n          var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles;\n\n          var _resource = _styles.get(_key);\n\n          if (!_resource) {\n            // We asserted this above but Flow can't figure out that the type satisfies\n            var ownerDocument = getDocumentFromRoot(resourceRoot);\n            _resource = {\n              type: 'stylesheet',\n              instance: null,\n              count: 0,\n              state: {\n                loading: NotLoaded,\n                preload: null\n              }\n            };\n\n            _styles.set(_key, _resource);\n\n            if (!preloadPropsMap.has(_key)) {\n              preloadStylesheet(ownerDocument, _key, preloadPropsFromStylesheet(qualifiedProps), _resource.state);\n            }\n          }\n\n          return _resource;\n        }\n\n        return null;\n      }\n\n    case 'script':\n      {\n        if (typeof pendingProps.src === 'string' && pendingProps.async === true) {\n          var scriptProps = pendingProps;\n\n          var _key2 = getScriptKey(scriptProps.src);\n\n          var scripts = getResourcesFromRoot(resourceRoot).hoistableScripts;\n\n          var _resource2 = scripts.get(_key2);\n\n          if (!_resource2) {\n            _resource2 = {\n              type: 'script',\n              instance: null,\n              count: 0,\n              state: null\n            };\n            scripts.set(_key2, _resource2);\n          }\n\n          return _resource2;\n        }\n\n        return {\n          type: 'void',\n          instance: null,\n          count: 0,\n          state: null\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"getResource encountered a type it did not expect: \\\"\" + type + \"\\\". this is a bug in React.\");\n      }\n  }\n}\n\nfunction styleTagPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    'data-href': rawProps.href,\n    'data-precedence': rawProps.precedence,\n    href: null,\n    precedence: null\n  });\n}\n\nfunction getStyleKey(href) {\n  var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);\n  return \"href=\\\"\" + limitedEscapedHref + \"\\\"\";\n}\n\nfunction getStyleTagSelector(href) {\n  var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);\n  return \"style[data-href~=\\\"\" + limitedEscapedHref + \"\\\"]\";\n}\n\nfunction getStylesheetSelectorFromKey(key) {\n  return \"link[rel=\\\"stylesheet\\\"][\" + key + \"]\";\n}\n\nfunction getPreloadStylesheetSelectorFromKey(key) {\n  return \"link[rel=\\\"preload\\\"][as=\\\"style\\\"][\" + key + \"]\";\n}\n\nfunction stylesheetPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    'data-precedence': rawProps.precedence,\n    precedence: null\n  });\n}\n\nfunction preloadStylesheet(ownerDocument, key, preloadProps, state) {\n  preloadPropsMap.set(key, preloadProps);\n\n  if (!ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {\n    // There is no matching stylesheet instance in the Document.\n    // We will insert a preload now to kick off loading because\n    // we expect this stylesheet to commit\n    var preloadEl = ownerDocument.querySelector(getPreloadStylesheetSelectorFromKey(key));\n\n    if (preloadEl) {\n      // If we find a preload already it was SSR'd and we won't have an actual\n      // loading state to track. For now we will just assume it is loaded\n      state.loading = Loaded;\n    } else {\n      var instance = ownerDocument.createElement('link');\n      state.preload = instance;\n      instance.addEventListener('load', function () {\n        return state.loading |= Loaded;\n      });\n      instance.addEventListener('error', function () {\n        return state.loading |= Errored;\n      });\n      setInitialProperties(instance, 'link', preloadProps);\n      markNodeAsHoistable(instance);\n      ownerDocument.head.appendChild(instance);\n    }\n  }\n}\n\nfunction preloadPropsFromStylesheet(props) {\n  return {\n    rel: 'preload',\n    as: 'style',\n    href: props.href,\n    crossOrigin: props.crossOrigin,\n    integrity: props.integrity,\n    media: props.media,\n    hrefLang: props.hrefLang,\n    referrerPolicy: props.referrerPolicy\n  };\n}\n\nfunction getScriptKey(src) {\n  var limitedEscapedSrc = escapeSelectorAttributeValueInsideDoubleQuotes(src);\n  return \"[src=\\\"\" + limitedEscapedSrc + \"\\\"]\";\n}\n\nfunction getScriptSelectorFromKey(key) {\n  return 'script[async]' + key;\n}\n\nfunction acquireResource(hoistableRoot, resource, props) {\n  resource.count++;\n\n  if (resource.instance === null) {\n    switch (resource.type) {\n      case 'style':\n        {\n          var qualifiedProps = props; // Attempt to hydrate instance from DOM\n\n          var instance = hoistableRoot.querySelector(getStyleTagSelector(qualifiedProps.href));\n\n          if (instance) {\n            resource.instance = instance;\n            markNodeAsHoistable(instance);\n            return instance;\n          }\n\n          var styleProps = styleTagPropsFromRawProps(props);\n          var ownerDocument = getDocumentFromRoot(hoistableRoot);\n          instance = ownerDocument.createElement('style');\n          markNodeAsHoistable(instance);\n          setInitialProperties(instance, 'style', styleProps); // TODO: `style` does not have loading state for tracking insertions. I\n          // guess because these aren't suspensey? Not sure whether this is a\n          // factoring smell.\n          // resource.state.loading |= Inserted;\n\n          insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n          resource.instance = instance;\n          return instance;\n        }\n\n      case 'stylesheet':\n        {\n          // This typing is enforce by `getResource`. If we change the logic\n          // there for what qualifies as a stylesheet resource we need to ensure\n          // this cast still makes sense;\n          var _qualifiedProps = props;\n          var key = getStyleKey(_qualifiedProps.href); // Attempt to hydrate instance from DOM\n\n          var _instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));\n\n          if (_instance) {\n            resource.state.loading |= Inserted;\n            resource.instance = _instance;\n            markNodeAsHoistable(_instance);\n            return _instance;\n          }\n\n          var stylesheetProps = stylesheetPropsFromRawProps(props);\n          var preloadProps = preloadPropsMap.get(key);\n\n          if (preloadProps) {\n            adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n          } // Construct and insert a new instance\n\n\n          var _ownerDocument = getDocumentFromRoot(hoistableRoot);\n\n          _instance = _ownerDocument.createElement('link');\n          markNodeAsHoistable(_instance);\n          var linkInstance = _instance;\n          linkInstance._p = new Promise(function (resolve, reject) {\n            linkInstance.onload = resolve;\n            linkInstance.onerror = reject;\n          });\n          setInitialProperties(_instance, 'link', stylesheetProps);\n          resource.state.loading |= Inserted;\n          insertStylesheet(_instance, _qualifiedProps.precedence, hoistableRoot);\n          resource.instance = _instance;\n          return _instance;\n        }\n\n      case 'script':\n        {\n          // This typing is enforce by `getResource`. If we change the logic\n          // there for what qualifies as a stylesheet resource we need to ensure\n          // this cast still makes sense;\n          var borrowedScriptProps = props;\n\n          var _key3 = getScriptKey(borrowedScriptProps.src); // Attempt to hydrate instance from DOM\n\n\n          var _instance2 = hoistableRoot.querySelector(getScriptSelectorFromKey(_key3));\n\n          if (_instance2) {\n            resource.instance = _instance2;\n            markNodeAsHoistable(_instance2);\n            return _instance2;\n          }\n\n          var scriptProps = borrowedScriptProps;\n\n          var _preloadProps = preloadPropsMap.get(_key3);\n\n          if (_preloadProps) {\n            scriptProps = assign({}, borrowedScriptProps);\n            adoptPreloadPropsForScript(scriptProps, _preloadProps);\n          } // Construct and insert a new instance\n\n\n          var _ownerDocument2 = getDocumentFromRoot(hoistableRoot);\n\n          _instance2 = _ownerDocument2.createElement('script');\n          markNodeAsHoistable(_instance2);\n          setInitialProperties(_instance2, 'link', scriptProps);\n\n          _ownerDocument2.head.appendChild(_instance2);\n\n          resource.instance = _instance2;\n          return _instance2;\n        }\n\n      case 'void':\n        {\n          return null;\n        }\n\n      default:\n        {\n          throw new Error(\"acquireResource encountered a resource type it did not expect: \\\"\" + resource.type + \"\\\". this is a bug in React.\");\n        }\n    }\n  } else {\n    // In the case of stylesheets, they might have already been assigned an\n    // instance during `suspendResource`. But that doesn't mean they were\n    // inserted, because the commit might have been interrupted. So we need to\n    // check now.\n    //\n    // The other resource types are unaffected because they are not\n    // yet suspensey.\n    //\n    // TODO: This is a bit of a code smell. Consider refactoring how\n    // `suspendResource` and `acquireResource` work together. The idea is that\n    // `suspendResource` does all the same stuff as `acquireResource` except\n    // for the insertion.\n    if (resource.type === 'stylesheet' && (resource.state.loading & Inserted) === NotLoaded) {\n      var _qualifiedProps2 = props;\n      var _instance3 = resource.instance;\n      resource.state.loading |= Inserted;\n      insertStylesheet(_instance3, _qualifiedProps2.precedence, hoistableRoot);\n    }\n  }\n\n  return resource.instance;\n}\nfunction releaseResource(resource) {\n  resource.count--;\n}\n\nfunction insertStylesheet(instance, precedence, root) {\n  var nodes = root.querySelectorAll('link[rel=\"stylesheet\"][data-precedence],style[data-precedence]');\n  var last = nodes.length ? nodes[nodes.length - 1] : null;\n  var prior = last;\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    var nodePrecedence = node.dataset.precedence;\n\n    if (nodePrecedence === precedence) {\n      prior = node;\n    } else if (prior !== last) {\n      break;\n    }\n  }\n\n  if (prior) {\n    // We get the prior from the document so we know it is in the tree.\n    // We also know that links can't be the topmost Node so the parentNode\n    // must exist.\n    prior.parentNode.insertBefore(instance, prior.nextSibling);\n  } else {\n    var parent = root.nodeType === DOCUMENT_NODE ? root.head : root;\n    parent.insertBefore(instance, parent.firstChild);\n  }\n}\n\nfunction adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {\n  if (stylesheetProps.crossOrigin == null) stylesheetProps.crossOrigin = preloadProps.crossOrigin;\n  if (stylesheetProps.referrerPolicy == null) stylesheetProps.referrerPolicy = preloadProps.referrerPolicy;\n  if (stylesheetProps.title == null) stylesheetProps.title = preloadProps.title;\n}\n\nfunction adoptPreloadPropsForScript(scriptProps, preloadProps) {\n  if (scriptProps.crossOrigin == null) scriptProps.crossOrigin = preloadProps.crossOrigin;\n  if (scriptProps.referrerPolicy == null) scriptProps.referrerPolicy = preloadProps.referrerPolicy;\n  if (scriptProps.integrity == null) scriptProps.integrity = preloadProps.integrity;\n}\n\nvar tagCaches = null;\nfunction hydrateHoistable(hoistableRoot, type, props, internalInstanceHandle) {\n  var ownerDocument = getDocumentFromRoot(hoistableRoot);\n  var instance = null;\n\n  getInstance: switch (type) {\n    case 'title':\n      {\n        instance = ownerDocument.getElementsByTagName('title')[0];\n\n        if (!instance || isOwnedInstance(instance) || instance.namespaceURI === SVG_NAMESPACE || instance.hasAttribute('itemprop')) {\n          instance = ownerDocument.createElement(type);\n          ownerDocument.head.insertBefore(instance, ownerDocument.querySelector('head > title'));\n        }\n\n        setInitialProperties(instance, type, props);\n        precacheFiberNode(internalInstanceHandle, instance);\n        markNodeAsHoistable(instance);\n        return instance;\n      }\n\n    case 'link':\n      {\n        var cache = getHydratableHoistableCache('link', 'href', ownerDocument);\n        var key = type + (props.href || '');\n        var maybeNodes = cache.get(key);\n\n        if (maybeNodes) {\n          var nodes = maybeNodes;\n\n          for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n\n            if (node.getAttribute('href') !== (props.href == null ? null : props.href) || node.getAttribute('rel') !== (props.rel == null ? null : props.rel) || node.getAttribute('title') !== (props.title == null ? null : props.title) || node.getAttribute('crossorigin') !== (props.crossOrigin == null ? null : props.crossOrigin)) {\n              // mismatch, try the next node;\n              continue;\n            }\n\n            instance = node;\n            nodes.splice(i, 1);\n            break getInstance;\n          }\n        }\n\n        instance = ownerDocument.createElement(type);\n        setInitialProperties(instance, type, props);\n        ownerDocument.head.appendChild(instance);\n        break;\n      }\n\n    case 'meta':\n      {\n        var _cache = getHydratableHoistableCache('meta', 'content', ownerDocument);\n\n        var _key4 = type + (props.content || '');\n\n        var _maybeNodes = _cache.get(_key4);\n\n        if (_maybeNodes) {\n          var _nodes = _maybeNodes;\n\n          for (var _i = 0; _i < _nodes.length; _i++) {\n            var _node = _nodes[_i]; // We coerce content to string because it is the most likely one to\n            // use a `toString` capable value. For the rest we just do identity match\n            // passing non-strings here is not really valid anyway.\n\n            {\n              checkAttributeStringCoercion(props.content, 'content');\n            }\n\n            if (_node.getAttribute('content') !== (props.content == null ? null : '' + props.content) || _node.getAttribute('name') !== (props.name == null ? null : props.name) || _node.getAttribute('property') !== (props.property == null ? null : props.property) || _node.getAttribute('http-equiv') !== (props.httpEquiv == null ? null : props.httpEquiv) || _node.getAttribute('charset') !== (props.charSet == null ? null : props.charSet)) {\n              // mismatch, try the next node;\n              continue;\n            }\n\n            instance = _node;\n\n            _nodes.splice(_i, 1);\n\n            break getInstance;\n          }\n        }\n\n        instance = ownerDocument.createElement(type);\n        setInitialProperties(instance, type, props);\n        ownerDocument.head.appendChild(instance);\n        break;\n      }\n\n    default:\n      throw new Error(\"getNodesForType encountered a type it did not expect: \\\"\" + type + \"\\\". This is a bug in React.\");\n  } // This node is a match\n\n\n  precacheFiberNode(internalInstanceHandle, instance);\n  markNodeAsHoistable(instance);\n  return instance;\n}\n\nfunction getHydratableHoistableCache(type, keyAttribute, ownerDocument) {\n  var cache;\n  var caches;\n\n  if (tagCaches === null) {\n    cache = new Map();\n    caches = tagCaches = new Map();\n    caches.set(ownerDocument, cache);\n  } else {\n    caches = tagCaches;\n    var maybeCache = caches.get(ownerDocument);\n\n    if (!maybeCache) {\n      cache = new Map();\n      caches.set(ownerDocument, cache);\n    } else {\n      cache = maybeCache;\n    }\n  }\n\n  if (cache.has(type)) {\n    // We use type as a special key that signals that this cache has been seeded for this type\n    return cache;\n  } // Mark this cache as seeded for this type\n\n\n  cache.set(type, null);\n  var nodes = ownerDocument.getElementsByTagName(type);\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (!isOwnedInstance(node) && (type !== 'link' || node.getAttribute('rel') !== 'stylesheet') && node.namespaceURI !== SVG_NAMESPACE) {\n      var nodeKey = node.getAttribute(keyAttribute) || '';\n      var key = type + nodeKey;\n      var existing = cache.get(key);\n\n      if (existing) {\n        existing.push(node);\n      } else {\n        cache.set(key, [node]);\n      }\n    }\n  }\n\n  return cache;\n}\n\nfunction mountHoistable(hoistableRoot, type, instance) {\n  var ownerDocument = getDocumentFromRoot(hoistableRoot);\n  ownerDocument.head.insertBefore(instance, type === 'title' ? ownerDocument.querySelector('head > title') : null);\n}\nfunction unmountHoistable(instance) {\n  instance.parentNode.removeChild(instance);\n}\nfunction isHostHoistableType(type, props, hostContext) {\n  var outsideHostContainerContext;\n  var hostContextProd;\n\n  {\n    var hostContextDev = hostContext; // We can only render resources when we are not within the host container context\n\n    outsideHostContainerContext = !hostContextDev.ancestorInfo.containerTagInScope;\n    hostContextProd = hostContextDev.context;\n  } // Global opt out of hoisting for anything in SVG Namespace or anything with an itemProp inside an itemScope\n\n\n  if (hostContextProd === HostContextNamespaceSvg || props.itemProp != null) {\n    {\n      if (outsideHostContainerContext && props.itemProp != null && (type === 'meta' || type === 'title' || type === 'style' || type === 'link' || type === 'script')) {\n        error('Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an' + ' `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop.' + ' Otherwise, try moving this tag into the <head> or <body> of the Document.', type, type);\n      }\n    }\n\n    return false;\n  }\n\n  switch (type) {\n    case 'meta':\n    case 'title':\n      {\n        return true;\n      }\n\n    case 'style':\n      {\n        if (typeof props.precedence !== 'string' || typeof props.href !== 'string' || props.href === '') {\n          {\n            if (outsideHostContainerContext) {\n              error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key.' + ' React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that' + ' does not conflic with the `href` values used in any other hoisted <style> or <link rel=\"stylesheet\" ...> tags. ' + ' Note that hoisting <style> tags is considered an advanced feature that most will not use directly.' + ' Consider moving the <style> tag to the <head> or consider adding a `precedence=\"default\"` and `href=\"some unique resource identifier\"`, or move the <style>' + ' to the <style> tag.');\n            }\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'link':\n      {\n        if (typeof props.rel !== 'string' || typeof props.href !== 'string' || props.href === '' || props.onLoad || props.onError) {\n          {\n            if (props.rel === 'stylesheet' && typeof props.precedence === 'string') {\n              validateLinkPropsForStyleResource(props);\n            }\n\n            if (outsideHostContainerContext) {\n              if (typeof props.rel !== 'string' || typeof props.href !== 'string' || props.href === '') {\n                error('Cannot render a <link> outside the main document without a `rel` and `href` prop.' + ' Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag');\n              } else if (props.onError || props.onLoad) {\n                error('Cannot render a <link> with onLoad or onError listeners outside the main document.' + ' Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or' + ' somewhere in the <body>.');\n              }\n            }\n          }\n\n          return false;\n        }\n\n        switch (props.rel) {\n          case 'stylesheet':\n            {\n              var precedence = props.precedence,\n                  disabled = props.disabled;\n\n              {\n                if (typeof precedence !== 'string') {\n                  if (outsideHostContainerContext) {\n                    error('Cannot render a <link rel=\"stylesheet\" /> outside the main document without knowing its precedence.' + ' Consider adding precedence=\"default\" or moving it into the root <head> tag.');\n                  }\n                }\n              }\n\n              return typeof precedence === 'string' && disabled == null;\n            }\n\n          default:\n            {\n              return true;\n            }\n        }\n      }\n\n    case 'script':\n      {\n        if (props.async !== true || props.onLoad || props.onError || typeof props.src !== 'string' || !props.src) {\n          {\n            if (outsideHostContainerContext) {\n              if (props.async !== true) {\n                error('Cannot render a sync or defer <script> outside the main document without knowing its order.' + ' Try adding async=\"\" or moving it into the root <head> tag.');\n              } else if (props.onLoad || props.onError) {\n                error('Cannot render a <script> with onLoad or onError listeners outside the main document.' + ' Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or' + ' somewhere in the <body>.');\n              } else {\n                error('Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop.' + ' Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or' + ' somewhere in the <body>.');\n              }\n            }\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'noscript':\n    case 'template':\n      {\n        {\n          if (outsideHostContainerContext) {\n            error('Cannot render <%s> outside the main document. Try moving it into the root <head> tag.', type);\n          }\n        }\n\n        return false;\n      }\n  }\n\n  return false;\n}\nfunction mayResourceSuspendCommit(resource) {\n  return resource.type === 'stylesheet' && (resource.state.loading & Inserted) === NotLoaded;\n}\nfunction preloadInstance(type, props) {\n  // Return true to indicate it's already loaded\n  return true;\n}\nfunction preloadResource(resource) {\n  if (resource.type === 'stylesheet' && (resource.state.loading & Settled) === NotLoaded) {\n    // we have not finished loading the underlying stylesheet yet.\n    return false;\n  } // Return true to indicate it's already loaded\n\n\n  return true;\n}\nvar suspendedState = null; // We use a noop function when we begin suspending because if possible we want the\n// waitfor step to finish synchronously. If it doesn't we'll return a function to\n// provide the actual unsuspend function and that will get completed when the count\n// hits zero or it will get cancelled if the root starts new work.\n\nfunction noop() {}\n\nfunction startSuspendingCommit() {\n  suspendedState = {\n    stylesheets: null,\n    count: 0,\n    unsuspend: noop\n  };\n}\nfunction suspendResource(hoistableRoot, resource, props) {\n  if (suspendedState === null) {\n    throw new Error('Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.');\n  }\n\n  var state = suspendedState;\n\n  if (resource.type === 'stylesheet') {\n    if (typeof props.media === 'string') {\n      // If we don't currently match media we avoid suspending on this resource\n      // and let it insert on the mutation path\n      if (matchMedia(props.media).matches === false) {\n        return;\n      }\n    }\n\n    if ((resource.state.loading & Inserted) === NotLoaded) {\n      if (resource.instance === null) {\n        var qualifiedProps = props;\n        var key = getStyleKey(qualifiedProps.href); // Attempt to hydrate instance from DOM\n\n        var instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));\n\n        if (instance) {\n          // If this instance has a loading state it came from the Fizz runtime.\n          // If there is not loading state it is assumed to have been server rendered\n          // as part of the preamble and therefore synchronously loaded. It could have\n          // errored however which we still do not yet have a means to detect. For now\n          // we assume it is loaded.\n          var maybeLoadingState = instance._p;\n\n          if (maybeLoadingState !== null && typeof maybeLoadingState === 'object' && // $FlowFixMe[method-unbinding]\n          typeof maybeLoadingState.then === 'function') {\n            var loadingState = maybeLoadingState;\n            state.count++;\n            var ping = onUnsuspend.bind(state);\n            loadingState.then(ping, ping);\n          }\n\n          resource.state.loading |= Inserted;\n          resource.instance = instance;\n          markNodeAsHoistable(instance);\n          return;\n        }\n\n        var ownerDocument = getDocumentFromRoot(hoistableRoot);\n        var stylesheetProps = stylesheetPropsFromRawProps(props);\n        var preloadProps = preloadPropsMap.get(key);\n\n        if (preloadProps) {\n          adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n        } // Construct and insert a new instance\n\n\n        instance = ownerDocument.createElement('link');\n        markNodeAsHoistable(instance);\n        var linkInstance = instance; // This Promise is a loading state used by the Fizz runtime. We need this incase there is a race\n        // between this resource being rendered on the client and being rendered with a late completed boundary.\n\n        linkInstance._p = new Promise(function (resolve, reject) {\n          linkInstance.onload = resolve;\n          linkInstance.onerror = reject;\n        });\n        setInitialProperties(instance, 'link', stylesheetProps);\n        resource.instance = instance;\n      }\n\n      if (state.stylesheets === null) {\n        state.stylesheets = new Map();\n      }\n\n      state.stylesheets.set(resource, hoistableRoot);\n      var preloadEl = resource.state.preload;\n\n      if (preloadEl && (resource.state.loading & Settled) === NotLoaded) {\n        state.count++;\n\n        var _ping = onUnsuspend.bind(state);\n\n        preloadEl.addEventListener('load', _ping);\n        preloadEl.addEventListener('error', _ping);\n      }\n    }\n  }\n}\nfunction waitForCommitToBeReady() {\n  if (suspendedState === null) {\n    throw new Error('Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.');\n  }\n\n  var state = suspendedState;\n\n  if (state.stylesheets && state.count === 0) {\n    // We are not currently blocked but we have not inserted all stylesheets.\n    // If this insertion happens and loads or errors synchronously then we can\n    // avoid suspending the commit. To do this we check the count again immediately after\n    insertSuspendedStylesheets(state, state.stylesheets);\n  } // We need to check the count again because the inserted stylesheets may have led to new\n  // tasks to wait on.\n\n\n  if (state.count > 0) {\n    return function (commit) {\n      // We almost never want to show content before its styles have loaded. But\n      // eventually we will give up and allow unstyled content. So this number is\n      // somewhat arbitrary — big enough that you'd only reach it under\n      // extreme circumstances.\n      // TODO: Figure out what the browser engines do during initial page load and\n      // consider aligning our behavior with that.\n      var stylesheetTimer = setTimeout(function () {\n        if (state.stylesheets) {\n          insertSuspendedStylesheets(state, state.stylesheets);\n        }\n\n        if (state.unsuspend) {\n          var unsuspend = state.unsuspend;\n          state.unsuspend = null;\n          unsuspend();\n        }\n      }, 60000); // one minute\n\n      state.unsuspend = commit;\n      return function () {\n        state.unsuspend = null;\n        clearTimeout(stylesheetTimer);\n      };\n    };\n  }\n\n  return null;\n}\n\nfunction onUnsuspend() {\n  this.count--;\n\n  if (this.count === 0) {\n    if (this.stylesheets) {\n      // If we haven't actually inserted the stylesheets yet we need to do so now before starting the commit.\n      // The reason we do this after everything else has finished is because we want to have all the stylesheets\n      // load synchronously right before mutating. Ideally the new styles will cause a single recalc only on the\n      // new tree. When we filled up stylesheets we only inlcuded stylesheets with matching media attributes so we\n      // wait for them to load before actually continuing. We expect this to increase the count above zero\n      insertSuspendedStylesheets(this, this.stylesheets);\n    } else if (this.unsuspend) {\n      var unsuspend = this.unsuspend;\n      this.unsuspend = null;\n      unsuspend();\n    }\n  }\n} // We use a value that is type distinct from precedence to track which one is last.\n// This ensures there is no collision with user defined precedences. Normally we would\n// just track this in module scope but since the precedences are tracked per HoistableRoot\n// we need to associate it to something other than a global scope hence why we try to\n// colocate it with the map of precedences in the first place\n\n\nvar LAST_PRECEDENCE = null; // This is typecast to non-null because it will always be set before read.\n// it is important that this not be used except when the stack guarantees it exists.\n// Currentlyt his is only during insertSuspendedStylesheet.\n\nvar precedencesByRoot = null;\n\nfunction insertSuspendedStylesheets(state, resources) {\n  // We need to clear this out so we don't try to reinsert after the stylesheets have loaded\n  state.stylesheets = null;\n\n  if (state.unsuspend === null) {\n    // The suspended commit was cancelled. We don't need to insert any stylesheets.\n    return;\n  } // Temporarily increment count. we don't want any synchronously loaded stylesheets to try to unsuspend\n  // before we finish inserting all stylesheets.\n\n\n  state.count++;\n  precedencesByRoot = new Map();\n  resources.forEach(insertStylesheetIntoRoot, state);\n  precedencesByRoot = null; // We can remove our temporary count and if we're still at zero we can unsuspend.\n  // If we are in the synchronous phase before deciding if the commit should suspend and this\n  // ends up hitting the unsuspend path it will just invoke the noop unsuspend.\n\n  onUnsuspend.call(state);\n}\n\nfunction insertStylesheetIntoRoot(root, resource, map) {\n  if (resource.state.loading & Inserted) {\n    // This resource was inserted by another root committing. we don't need to insert it again\n    return;\n  }\n\n  var last;\n  var precedences = precedencesByRoot.get(root);\n\n  if (!precedences) {\n    precedences = new Map();\n    precedencesByRoot.set(root, precedences);\n    var nodes = root.querySelectorAll('link[data-precedence],style[data-precedence]');\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n\n      if (node.nodeName === 'link' || // We omit style tags with media=\"not all\" because they are not in the right position\n      // and will be hoisted by the Fizz runtime imminently.\n      node.getAttribute('media') !== 'not all') {\n        precedences.set(node.dataset.precedence, node);\n        last = node;\n      }\n    }\n\n    if (last) {\n      precedences.set(LAST_PRECEDENCE, last);\n    }\n  } else {\n    last = precedences.get(LAST_PRECEDENCE);\n  } // We only call this after we have constructed an instance so we assume it here\n\n\n  var instance = resource.instance; // We will always have a precedence for stylesheet instances\n\n  var precedence = instance.getAttribute('data-precedence');\n  var prior = precedences.get(precedence) || last;\n\n  if (prior === last) {\n    precedences.set(LAST_PRECEDENCE, instance);\n  }\n\n  precedences.set(precedence, instance);\n  this.count++;\n  var onComplete = onUnsuspend.bind(this);\n  instance.addEventListener('load', onComplete);\n  instance.addEventListener('error', onComplete);\n\n  if (prior) {\n    prior.parentNode.insertBefore(instance, prior.nextSibling);\n  } else {\n    var parent = root.nodeType === DOCUMENT_NODE ? root.head : root;\n    parent.insertBefore(instance, parent.firstChild);\n  }\n\n  resource.state.loading |= Inserted;\n}\n\nvar NotPendingTransition = NotPending;\n\nvar Dispatcher$1 = Internals.Dispatcher;\n\nif (typeof document !== 'undefined') {\n  // Set the default dispatcher to the client dispatcher\n  Dispatcher$1.current = ReactDOMClientDispatcher;\n}\n/* global reportError */\n\nvar defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\n// emulating an uncaught JavaScript error.\nreportError : function (error) {\n  // In older browsers and test environments, fallback to console.error.\n  // eslint-disable-next-line react-internal/no-production-logging\n  console['error'](error);\n}; // $FlowFixMe[missing-this-annot]\n\nfunction ReactDOMRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n} // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\nReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = // $FlowFixMe[missing-this-annot]\nfunction (children) {\n  var root = this._internalRoot;\n\n  if (root === null) {\n    throw new Error('Cannot update an unmounted root.');\n  }\n\n  {\n    if (typeof arguments[1] === 'function') {\n      error('does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\n    } else if (isValidContainer(arguments[1])) {\n      error('You passed a container to the second argument of root.render(...). ' + \"You don't need to pass it again since you already passed it to create the root.\");\n    } else if (typeof arguments[1] !== 'undefined') {\n      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');\n    }\n  }\n\n  updateContainer(children, root, null, null);\n}; // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\nReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = // $FlowFixMe[missing-this-annot]\nfunction () {\n  {\n    if (typeof arguments[0] === 'function') {\n      error('does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\n    }\n  }\n\n  var root = this._internalRoot;\n\n  if (root !== null) {\n    this._internalRoot = null;\n    var container = root.containerInfo;\n\n    {\n      if (isAlreadyRendering()) {\n        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');\n      }\n    }\n\n    flushSync$1(function () {\n      updateContainer(null, root, null, null);\n    });\n    unmarkContainerAsRoot(container);\n  }\n};\n\nfunction createRoot$1(container, options) {\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  warnIfReactDOMContainerInDEV(container);\n  var isStrictMode = false;\n  var concurrentUpdatesByDefaultOverride = false;\n  var identifierPrefix = '';\n  var onRecoverableError = defaultOnRecoverableError;\n  var transitionCallbacks = null;\n\n  if (options !== null && options !== undefined) {\n    {\n      if (options.hydrate) {\n        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');\n      } else {\n        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {\n          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\\n\\n' + '  let root = createRoot(domContainer);\\n' + '  root.render(<App />);');\n        }\n      }\n    }\n\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n\n    if (options.unstable_transitionCallbacks !== undefined) {\n      transitionCallbacks = options.unstable_transitionCallbacks;\n    }\n  }\n\n  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks);\n  markContainerAsRoot(root.current, container);\n  Dispatcher$1.current = ReactDOMClientDispatcher;\n  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\n  listenToAllSupportedEvents(rootContainerElement); // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n\n  return new ReactDOMRoot(root);\n} // $FlowFixMe[missing-this-annot]\n\nfunction ReactDOMHydrationRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n}\n\nfunction scheduleHydration(target) {\n  if (target) {\n    queueExplicitHydrationTarget(target);\n  }\n} // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\nReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;\nfunction hydrateRoot$1(container, initialChildren, options) {\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  warnIfReactDOMContainerInDEV(container);\n\n  {\n    if (initialChildren === undefined) {\n      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');\n    }\n  } // For now we reuse the whole bag of options since they contain\n  // the hydration callbacks.\n\n\n  var hydrationCallbacks = options != null ? options : null;\n  var isStrictMode = false;\n  var concurrentUpdatesByDefaultOverride = false;\n  var identifierPrefix = '';\n  var onRecoverableError = defaultOnRecoverableError;\n  var transitionCallbacks = null;\n  var formState = null;\n\n  if (options !== null && options !== undefined) {\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n\n    if (options.unstable_transitionCallbacks !== undefined) {\n      transitionCallbacks = options.unstable_transitionCallbacks;\n    }\n\n    {\n      if (options.formState !== undefined) {\n        formState = options.formState;\n      }\n    }\n  }\n\n  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks, formState);\n  markContainerAsRoot(root.current, container);\n  Dispatcher$1.current = ReactDOMClientDispatcher; // This can't be a comment node since hydration doesn't work on comment nodes anyway.\n\n  listenToAllSupportedEvents(container); // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n\n  return new ReactDOMHydrationRoot(root);\n}\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));\n} // TODO: Remove this function which also includes comment nodes.\n// We only use it in places that are currently more relaxed.\n\nfunction isValidContainerLegacy(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\n}\n\nfunction warnIfReactDOMContainerInDEV(container) {\n  {\n    if (isContainerMarkedAsRoot(container)) {\n      if (container._reactRootContainer) {\n        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');\n      } else {\n        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');\n      }\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar topLevelUpdateWarnings;\n\n{\n  topLevelUpdateWarnings = function (container) {\n    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {\n      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);\n\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          error('It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');\n        }\n      }\n    }\n\n    var isRootRenderedBySomeReact = !!container._reactRootContainer;\n    var rootEl = getReactRootElementInContainer(container);\n    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));\n\n    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {\n      error('Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');\n    }\n  };\n}\n\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOCUMENT_NODE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the\n  // legacy API.\n}\n\nfunction legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {\n  if (isHydrationContainer) {\n    if (typeof callback === 'function') {\n      var originalCallback = callback;\n\n      callback = function () {\n        var instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    }\n\n    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n    '', // identifierPrefix\n    noopOnRecoverableError, // TODO(luna) Support hydration later\n    null, null);\n    container._reactRootContainer = root;\n    markContainerAsRoot(root.current, container);\n    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container; // $FlowFixMe[incompatible-call]\n\n    listenToAllSupportedEvents(rootContainerElement);\n    flushSync$1();\n    return root;\n  } else {\n    // First clear any existing content.\n    clearContainer(container);\n\n    if (typeof callback === 'function') {\n      var _originalCallback = callback;\n\n      callback = function () {\n        var instance = getPublicRootInstance(_root);\n\n        _originalCallback.call(instance);\n      };\n    }\n\n    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n    '', // identifierPrefix\n    noopOnRecoverableError, // onRecoverableError\n    null // transitionCallbacks\n    );\n\n    container._reactRootContainer = _root;\n    markContainerAsRoot(_root.current, container);\n\n    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container; // $FlowFixMe[incompatible-call]\n\n\n    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.\n\n    flushSync$1(function () {\n      updateContainer(initialChildren, _root, parentComponent, callback);\n    });\n    return _root;\n  }\n}\n\nfunction warnOnInvalidCallback(callback) {\n  {\n    if (callback !== null && typeof callback !== 'function') {\n      error('Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n    }\n  }\n}\n\nfunction legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\n  {\n    topLevelUpdateWarnings(container);\n    warnOnInvalidCallback(callback === undefined ? null : callback);\n  }\n\n  var maybeRoot = container._reactRootContainer;\n  var root;\n\n  if (!maybeRoot) {\n    // Initial mount\n    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);\n  } else {\n    root = maybeRoot;\n\n    if (typeof callback === 'function') {\n      var originalCallback = callback;\n\n      callback = function () {\n        var instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    } // Update\n\n\n    updateContainer(children, root, parentComponent, callback);\n  }\n\n  return getPublicRootInstance(root);\n}\n\nfunction findDOMNode(componentOrElement) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.stateNode !== null) {\n      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\n\n      if (!warnedAboutRefsInRender) {\n        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n\n  if (componentOrElement == null) {\n    return null;\n  }\n\n  if (componentOrElement.nodeType === ELEMENT_NODE) {\n    return componentOrElement;\n  }\n\n  {\n    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');\n  }\n}\nfunction hydrate(element, container, callback) {\n  {\n    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \"if it's running React 17. Learn \" + 'more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  {\n    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');\n    }\n  } // TODO: throw or warn if we couldn't hydrate?\n\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);\n}\nfunction render(element, container, callback) {\n  {\n    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \"if it's running React 17. Learn \" + 'more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  {\n    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');\n    }\n  }\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\n}\nfunction unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n  {\n    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + \"the createRoot API, your app will behave as if it's running React \" + '17. Learn more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(containerNode)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (parentComponent == null || !has(parentComponent)) {\n    throw new Error('parentComponent must be a valid React Component');\n  }\n\n  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\n}\nfunction unmountComponentAtNode(container) {\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  {\n    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');\n    }\n  }\n\n  if (container._reactRootContainer) {\n    {\n      var rootEl = getReactRootElementInContainer(container);\n      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);\n\n      if (renderedByDifferentReact) {\n        error(\"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.');\n      }\n    } // Unmount should not be batched.\n\n\n    flushSync$1(function () {\n      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {\n        // $FlowFixMe[incompatible-type] This should probably use `delete container._reactRootContainer`\n        container._reactRootContainer = null;\n        unmarkContainerAsRoot(container);\n      });\n    }); // If you call unmountComponentAtNode twice in quick succession, you'll\n    // get `true` twice. That's probably fine?\n\n    return true;\n  } else {\n    {\n      var _rootEl = getReactRootElementInContainer(container);\n\n      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.\n\n      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && // $FlowFixMe[prop-missing]\n      // $FlowFixMe[incompatible-use]\n      !!container.parentNode._reactRootContainer;\n\n      if (hasNonRootReactChild) {\n        error(\"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction getCrossOriginString(input) {\n  if (typeof input === 'string') {\n    return input === 'use-credentials' ? input : '';\n  }\n\n  return undefined;\n}\nfunction getCrossOriginStringAs(as, input) {\n  if (as === 'font') {\n    return '';\n  }\n\n  if (typeof input === 'string') {\n    return input === 'use-credentials' ? input : '';\n  }\n\n  return undefined;\n}\n\nvar Dispatcher = Internals.Dispatcher;\nfunction prefetchDNS(href) {\n  {\n    if (typeof href !== 'string' || !href) {\n      error('ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.', getValueDescriptorExpectingObjectForWarning(href));\n    } else if (arguments.length > 1) {\n      var options = arguments[1];\n\n      if (typeof options === 'object' && options.hasOwnProperty('crossOrigin')) {\n        error('ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.', getValueDescriptorExpectingEnumForWarning(options));\n      } else {\n        error('ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.', getValueDescriptorExpectingEnumForWarning(options));\n      }\n    }\n  }\n\n  var dispatcher = Dispatcher.current;\n\n  if (dispatcher && typeof href === 'string') {\n    dispatcher.prefetchDNS(href);\n  } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preconnect(href, options) {\n  {\n    if (typeof href !== 'string' || !href) {\n      error('ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.', getValueDescriptorExpectingObjectForWarning(href));\n    } else if (options != null && typeof options !== 'object') {\n      error('ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.', getValueDescriptorExpectingEnumForWarning(options));\n    } else if (options != null && typeof options.crossOrigin !== 'string') {\n      error('ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.', getValueDescriptorExpectingObjectForWarning(options.crossOrigin));\n    }\n  }\n\n  var dispatcher = Dispatcher.current;\n\n  if (dispatcher && typeof href === 'string') {\n    var crossOrigin = options ? getCrossOriginString(options.crossOrigin) : null;\n    dispatcher.preconnect(href, crossOrigin);\n  } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preload(href, options) {\n  {\n    var encountered = '';\n\n    if (typeof href !== 'string' || !href) {\n      encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n    }\n\n    if (options == null || typeof options !== 'object') {\n      encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n    } else if (typeof options.as !== 'string' || !options.as) {\n      encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingObjectForWarning(options.as) + \".\";\n    }\n\n    if (encountered) {\n      error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel=\"preload\" as=\"...\" />` tag.%s', encountered);\n    }\n  }\n\n  var dispatcher = Dispatcher.current;\n\n  if (dispatcher && typeof href === 'string' && // We check existence because we cannot enforce this function is actually called with the stated type\n  typeof options === 'object' && options !== null && typeof options.as === 'string') {\n    var as = options.as;\n    var crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n    dispatcher.preload(href, as, {\n      crossOrigin: crossOrigin,\n      integrity: typeof options.integrity === 'string' ? options.integrity : undefined,\n      nonce: typeof options.nonce === 'string' ? options.nonce : undefined,\n      type: typeof options.type === 'string' ? options.type : undefined,\n      fetchPriority: typeof options.fetchPriority === 'string' ? options.fetchPriority : undefined,\n      referrerPolicy: typeof options.referrerPolicy === 'string' ? options.referrerPolicy : undefined,\n      imageSrcSet: typeof options.imageSrcSet === 'string' ? options.imageSrcSet : undefined,\n      imageSizes: typeof options.imageSizes === 'string' ? options.imageSizes : undefined\n    });\n  } // We don't error because preload needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preloadModule(href, options) {\n  {\n    var encountered = '';\n\n    if (typeof href !== 'string' || !href) {\n      encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n    }\n\n    if (options !== undefined && typeof options !== 'object') {\n      encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n    } else if (options && 'as' in options && typeof options.as !== 'string') {\n      encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingObjectForWarning(options.as) + \".\";\n    }\n\n    if (encountered) {\n      error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel=\"modulepreload\" as=\"...\" />` tag.%s', encountered);\n    }\n  }\n\n  var dispatcher = Dispatcher.current;\n\n  if (dispatcher && typeof href === 'string') {\n    if (options) {\n      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n      dispatcher.preloadModule(href, {\n        as: typeof options.as === 'string' && options.as !== 'script' ? options.as : undefined,\n        crossOrigin: crossOrigin,\n        integrity: typeof options.integrity === 'string' ? options.integrity : undefined\n      });\n    } else {\n      dispatcher.preloadModule(href);\n    }\n  } // We don't error because preload needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preinit(href, options) {\n  {\n    if (typeof href !== 'string' || !href) {\n      error('ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.', getValueDescriptorExpectingObjectForWarning(href));\n    } else if (options == null || typeof options !== 'object') {\n      error('ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.', getValueDescriptorExpectingEnumForWarning(options));\n    } else if (options.as !== 'style' && options.as !== 'script') {\n      error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are \"style\" and \"script\".', getValueDescriptorExpectingEnumForWarning(options.as));\n    }\n  }\n\n  var dispatcher = Dispatcher.current;\n\n  if (dispatcher && typeof href === 'string' && options && typeof options.as === 'string') {\n    var as = options.as;\n    var crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n    var integrity = typeof options.integrity === 'string' ? options.integrity : undefined;\n    var fetchPriority = typeof options.fetchPriority === 'string' ? options.fetchPriority : undefined;\n\n    if (as === 'style') {\n      dispatcher.preinitStyle(href, typeof options.precedence === 'string' ? options.precedence : undefined, {\n        crossOrigin: crossOrigin,\n        integrity: integrity,\n        fetchPriority: fetchPriority\n      });\n    } else if (as === 'script') {\n      dispatcher.preinitScript(href, {\n        crossOrigin: crossOrigin,\n        integrity: integrity,\n        fetchPriority: fetchPriority,\n        nonce: typeof options.nonce === 'string' ? options.nonce : undefined\n      });\n    }\n  } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preinitModule(href, options) {\n  {\n    var encountered = '';\n\n    if (typeof href !== 'string' || !href) {\n      encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n    }\n\n    if (options !== undefined && typeof options !== 'object') {\n      encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n    } else if (options && 'as' in options && options.as !== 'script') {\n      encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingEnumForWarning(options.as) + \".\";\n    }\n\n    if (encountered) {\n      error('ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s', encountered);\n    } else {\n      var as = options && typeof options.as === 'string' ? options.as : 'script';\n\n      switch (as) {\n        case 'script':\n          {\n            break;\n          }\n        // We have an invalid as type and need to warn\n\n        default:\n          {\n            var typeOfAs = getValueDescriptorExpectingEnumForWarning(as);\n\n            error('ReactDOM.preinitModule(): Currently the only supported \"as\" type for this function is \"script\"' + ' but received \"%s\" instead. This warning was generated for `href` \"%s\". In the future other' + ' module types will be supported, aligning with the import-attributes proposal. Learn more here:' + ' (https://github.com/tc39/proposal-import-attributes)', typeOfAs, href);\n          }\n      }\n    }\n  }\n\n  var dispatcher = Dispatcher.current;\n\n  if (dispatcher && typeof href === 'string') {\n    if (typeof options === 'object' && options !== null) {\n      if (options.as == null || options.as === 'script') {\n        var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n        dispatcher.preinitModuleScript(href, {\n          crossOrigin: crossOrigin,\n          integrity: typeof options.integrity === 'string' ? options.integrity : undefined,\n          nonce: typeof options.nonce === 'string' ? options.nonce : undefined\n        });\n      }\n    } else if (options == null) {\n      dispatcher.preinitModuleScript(href);\n    }\n  } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\n\nfunction getValueDescriptorExpectingObjectForWarning(thing) {\n  return thing === null ? '`null`' : thing === undefined ? '`undefined`' : thing === '' ? 'an empty string' : \"something with type \\\"\" + typeof thing + \"\\\"\";\n}\n\nfunction getValueDescriptorExpectingEnumForWarning(thing) {\n  return thing === null ? '`null`' : thing === undefined ? '`undefined`' : thing === '' ? 'an empty string' : typeof thing === 'string' ? JSON.stringify(thing) : typeof thing === 'number' ? '`' + thing + '`' : \"something with type \\\"\" + typeof thing + \"\\\"\";\n}\n\n{\n  if (typeof Map !== 'function' || // $FlowFixMe[prop-missing] Flow incorrectly thinks Map has no prototype\n  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowFixMe[prop-missing] Flow incorrectly thinks Set has no prototype\n  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {\n    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n  }\n}\n\nfunction createPortal(children, container) {\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  } // TODO: pass ReactDOM portal implementation as third argument\n  // $FlowFixMe[incompatible-return] The Flow type is opaque but there's no way to actually create it.\n\n\n  return createPortal$1(children, container, null, key);\n}\n\nfunction renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);\n}\n\nfunction createRoot(container, options) {\n  {\n    if (!Internals.usingClientEntryPoint && !false) {\n      error('You are importing createRoot from \"react-dom\" which is not supported. ' + 'You should instead import it from \"react-dom/client\".');\n    }\n  }\n\n  return createRoot$1(container, options);\n}\n\nfunction hydrateRoot(container, initialChildren, options) {\n  {\n    if (!Internals.usingClientEntryPoint && !false) {\n      error('You are importing hydrateRoot from \"react-dom\" which is not supported. ' + 'You should instead import it from \"react-dom/client\".');\n    }\n  }\n\n  return hydrateRoot$1(container, initialChildren, options);\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\n\nfunction flushSync(fn) {\n  {\n    if (isAlreadyRendering()) {\n      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');\n    }\n  }\n\n  return flushSync$1(fn);\n}\n// This is an array for better minification.\n\nInternals.Events = [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1];\nvar foundDevTools = injectIntoDevTools({\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  bundleType: 1 ,\n  version: ReactVersion,\n  rendererPackageName: 'react-dom'\n});\n\n{\n  if (!foundDevTools && canUseDOM && window.top === window.self) {\n    // If we're in Chrome or Firefox, provide a download link if not installed.\n    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.\n\n      if (/^(https?|file):$/.test(protocol)) {\n        // eslint-disable-next-line react-internal/no-production-logging\n        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');\n      }\n    }\n  }\n}\n\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\nexports.createPortal = createPortal;\nexports.createRoot = createRoot;\nexports.findDOMNode = findDOMNode;\nexports.flushSync = flushSync;\nexports.hydrate = hydrate;\nexports.hydrateRoot = hydrateRoot;\nexports.preconnect = preconnect;\nexports.prefetchDNS = prefetchDNS;\nexports.preinit = preinit;\nexports.preinitModule = preinitModule;\nexports.preload = preload;\nexports.preloadModule = preloadModule;\nexports.render = render;\nexports.unmountComponentAtNode = unmountComponentAtNode;\nexports.unstable_batchedUpdates = batchedUpdates$1;\nexports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;\nexports.useFormState = useFormState;\nexports.useFormStatus = useFormStatus;\nexports.version = ReactVersion;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,